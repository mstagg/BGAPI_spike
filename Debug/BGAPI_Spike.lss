
BGAPI_Spike.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003e  00800100  00001722  000017b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001722  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000006af  0080013e  0080013e  000017f4  2**0
                  ALLOC
  3 .stab         000032f4  00000000  00000000  000017f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002146  00000000  00000000  00004ae8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00006c2e  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000060  00000000  00000000  00006c40  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000023d  00000000  00000000  00006ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000003c  00000000  00000000  00006edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000119  00000000  00000000  00006f19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__ctors_end>
       4:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       8:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
       c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      10:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      14:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      18:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      1c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      20:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      24:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      28:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      2c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      30:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      34:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      38:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      3c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      40:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      44:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      48:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      4c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      50:	0c 94 27 05 	jmp	0xa4e	; 0xa4e <__vector_20>
      54:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      58:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      5c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      60:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      64:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      68:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      6c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      70:	0c 94 b7 03 	jmp	0x76e	; 0x76e <__vector_28>
      74:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      78:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      7c:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      80:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      84:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>
      88:	0c 94 7f 00 	jmp	0xfe	; 0xfe <__bad_interrupt>

0000008c <BTLE_hex>:
      8c:	30 31 32 33 34 35 36 37 38 39 41 42 43 44 45 46     0123456789ABCDEF
	...

0000009d <__c.2157>:
      9d:	72 73 73 69 3d 25 64 20 62 61 74 74 3d 25 64 20     rssi=%d batt=%d 
      ad:	74 65 6d 70 3d 25 64 20 6d 61 63 3d 25 64 20 0d     temp=%d mac=%d .
      bd:	0a 00 00                                            ...

000000c0 <__ctors_end>:
      c0:	11 24       	eor	r1, r1
      c2:	1f be       	out	0x3f, r1	; 63
      c4:	cf ef       	ldi	r28, 0xFF	; 255
      c6:	d0 e4       	ldi	r29, 0x40	; 64
      c8:	de bf       	out	0x3e, r29	; 62
      ca:	cd bf       	out	0x3d, r28	; 61

000000cc <__do_copy_data>:
      cc:	11 e0       	ldi	r17, 0x01	; 1
      ce:	a0 e0       	ldi	r26, 0x00	; 0
      d0:	b1 e0       	ldi	r27, 0x01	; 1
      d2:	e2 e2       	ldi	r30, 0x22	; 34
      d4:	f7 e1       	ldi	r31, 0x17	; 23
      d6:	00 e0       	ldi	r16, 0x00	; 0
      d8:	0b bf       	out	0x3b, r16	; 59
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x14>
      dc:	07 90       	elpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ae 33       	cpi	r26, 0x3E	; 62
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0x10>

000000e6 <__do_clear_bss>:
      e6:	27 e0       	ldi	r18, 0x07	; 7
      e8:	ae e3       	ldi	r26, 0x3E	; 62
      ea:	b1 e0       	ldi	r27, 0x01	; 1
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ad 3e       	cpi	r26, 0xED	; 237
      f2:	b2 07       	cpc	r27, r18
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>
      f6:	0e 94 1a 08 	call	0x1034	; 0x1034 <main>
      fa:	0c 94 8f 0b 	jmp	0x171e	; 0x171e <_exit>

000000fe <__bad_interrupt>:
      fe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000102 <wan_init>:
#include "wan_msg.h"
#include "wan_driver.h"


void wan_init()
{
     102:	cf 93       	push	r28
     104:	df 93       	push	r29
     106:	cd b7       	in	r28, 0x3d	; 61
     108:	de b7       	in	r29, 0x3e	; 62
	wan_usart_init();
     10a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <wan_usart_init>
	//wan_usart_get_device_address();

	wan_driver_init();
     10e:	0e 94 b1 00 	call	0x162	; 0x162 <wan_driver_init>
}
     112:	df 91       	pop	r29
     114:	cf 91       	pop	r28
     116:	08 95       	ret

00000118 <wan_set_cts>:

void wan_set_cts()
{
     118:	cf 93       	push	r28
     11a:	df 93       	push	r29
     11c:	cd b7       	in	r28, 0x3d	; 61
     11e:	de b7       	in	r29, 0x3e	; 62
	//pd0 low
	PORTD &= ~_BV(PD0);
     120:	8b e2       	ldi	r24, 0x2B	; 43
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	2b e2       	ldi	r18, 0x2B	; 43
     126:	30 e0       	ldi	r19, 0x00	; 0
     128:	f9 01       	movw	r30, r18
     12a:	20 81       	ld	r18, Z
     12c:	2e 7f       	andi	r18, 0xFE	; 254
     12e:	fc 01       	movw	r30, r24
     130:	20 83       	st	Z, r18
}
     132:	df 91       	pop	r29
     134:	cf 91       	pop	r28
     136:	08 95       	ret

00000138 <wan_get_rts>:

uint8_t wan_get_rts()
{
     138:	cf 93       	push	r28
     13a:	df 93       	push	r29
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
	// return logic high or low
	return (PIND & _BV(PD1));
     140:	89 e2       	ldi	r24, 0x29	; 41
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	fc 01       	movw	r30, r24
     146:	80 81       	ld	r24, Z
     148:	82 70       	andi	r24, 0x02	; 2
}
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <wan_tick>:


void wan_tick()
{
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
	wan_driver_tick();
     158:	0e 94 bc 00 	call	0x178	; 0x178 <wan_driver_tick>

}
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <wan_driver_init>:
int message_length = 0;
int cmd = 0;


void wan_driver_init()
{
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
	//queue_init(&wan_queue, WAN_MSG_QUEUE_SIZE);
	init_buffer();
     16a:	0e 94 6d 01 	call	0x2da	; 0x2da <init_buffer>
	init_lines();
     16e:	0e 94 80 01 	call	0x300	; 0x300 <init_lines>
}
     172:	df 91       	pop	r29
     174:	cf 91       	pop	r28
     176:	08 95       	ret

00000178 <wan_driver_tick>:

void wan_driver_tick()
{
     178:	0f 93       	push	r16
     17a:	1f 93       	push	r17
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	c0 55       	subi	r28, 0x50	; 80
     186:	d1 09       	sbc	r29, r1
     188:	0f b6       	in	r0, 0x3f	; 63
     18a:	f8 94       	cli
     18c:	de bf       	out	0x3e, r29	; 62
     18e:	0f be       	out	0x3f, r0	; 63
     190:	cd bf       	out	0x3d, r28	; 61
	char temp_buff[80];
	if (wan_usart_data_available())
     192:	0e 94 65 04 	call	0x8ca	; 0x8ca <wan_usart_data_available>
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <wan_driver_tick+0x24>
     19a:	93 c0       	rjmp	.+294    	; 0x2c2 <wan_driver_tick+0x14a>
	{
		//btle_usart_transmit_string("here2\r\n");
		//btle_usart_transmit_string("here1\r\n");
		// get the bytes
		bytes_received[array_index] = wan_usart_data_read();
     19c:	80 91 43 01 	lds	r24, 0x0143
     1a0:	08 2f       	mov	r16, r24
     1a2:	10 e0       	ldi	r17, 0x00	; 0
     1a4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <wan_usart_data_read>
     1a8:	28 2f       	mov	r18, r24
     1aa:	c8 01       	movw	r24, r16
     1ac:	85 56       	subi	r24, 0x65	; 101
     1ae:	99 4f       	sbci	r25, 0xF9	; 249
     1b0:	fc 01       	movw	r30, r24
     1b2:	20 83       	st	Z, r18
		if (array_index < 2)
     1b4:	80 91 43 01 	lds	r24, 0x0143
     1b8:	82 30       	cpi	r24, 0x02	; 2
     1ba:	80 f4       	brcc	.+32     	; 0x1dc <wan_driver_tick+0x64>
		{
			bytes_message[message_index] = bytes_received[array_index];
     1bc:	80 91 44 01 	lds	r24, 0x0144
     1c0:	88 2f       	mov	r24, r24
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	20 91 43 01 	lds	r18, 0x0143
     1c8:	22 2f       	mov	r18, r18
     1ca:	30 e0       	ldi	r19, 0x00	; 0
     1cc:	25 56       	subi	r18, 0x65	; 101
     1ce:	39 4f       	sbci	r19, 0xF9	; 249
     1d0:	f9 01       	movw	r30, r18
     1d2:	20 81       	ld	r18, Z
     1d4:	86 52       	subi	r24, 0x26	; 38
     1d6:	9a 4f       	sbci	r25, 0xFA	; 250
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
		}
		// get the length
		if (array_index == 0)
     1dc:	80 91 43 01 	lds	r24, 0x0143
     1e0:	88 23       	and	r24, r24
     1e2:	81 f5       	brne	.+96     	; 0x244 <wan_driver_tick+0xcc>
		{
			message_length = bytes_received[array_index];
     1e4:	80 91 43 01 	lds	r24, 0x0143
     1e8:	88 2f       	mov	r24, r24
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	85 56       	subi	r24, 0x65	; 101
     1ee:	99 4f       	sbci	r25, 0xF9	; 249
     1f0:	fc 01       	movw	r30, r24
     1f2:	80 81       	ld	r24, Z
     1f4:	88 2f       	mov	r24, r24
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	90 93 46 01 	sts	0x0146, r25
     1fc:	80 93 45 01 	sts	0x0145, r24
			sprintf(temp_buff, "len: %d", message_length);
     200:	80 91 45 01 	lds	r24, 0x0145
     204:	90 91 46 01 	lds	r25, 0x0146
     208:	29 2f       	mov	r18, r25
     20a:	2f 93       	push	r18
     20c:	8f 93       	push	r24
     20e:	8b e2       	ldi	r24, 0x2B	; 43
     210:	91 e0       	ldi	r25, 0x01	; 1
     212:	89 2f       	mov	r24, r25
     214:	8f 93       	push	r24
     216:	8b e2       	ldi	r24, 0x2B	; 43
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	8f 93       	push	r24
     21c:	ce 01       	movw	r24, r28
     21e:	01 96       	adiw	r24, 0x01	; 1
     220:	89 2f       	mov	r24, r25
     222:	8f 93       	push	r24
     224:	ce 01       	movw	r24, r28
     226:	01 96       	adiw	r24, 0x01	; 1
     228:	8f 93       	push	r24
     22a:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <sprintf>
     22e:	0f 90       	pop	r0
     230:	0f 90       	pop	r0
     232:	0f 90       	pop	r0
     234:	0f 90       	pop	r0
     236:	0f 90       	pop	r0
     238:	0f 90       	pop	r0
			btle_usart_transmit_string(temp_buff);
     23a:	ce 01       	movw	r24, r28
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	0e 94 86 03 	call	0x70c	; 0x70c <btle_usart_transmit_string>
     242:	35 c0       	rjmp	.+106    	; 0x2ae <wan_driver_tick+0x136>

		} else if (array_index == 1)
     244:	80 91 43 01 	lds	r24, 0x0143
     248:	81 30       	cpi	r24, 0x01	; 1
     24a:	79 f4       	brne	.+30     	; 0x26a <wan_driver_tick+0xf2>
		{
			cmd = bytes_received[array_index];
     24c:	80 91 43 01 	lds	r24, 0x0143
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	85 56       	subi	r24, 0x65	; 101
     256:	99 4f       	sbci	r25, 0xF9	; 249
     258:	fc 01       	movw	r30, r24
     25a:	80 81       	ld	r24, Z
     25c:	88 2f       	mov	r24, r24
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	90 93 48 01 	sts	0x0148, r25
     264:	80 93 47 01 	sts	0x0147, r24
     268:	22 c0       	rjmp	.+68     	; 0x2ae <wan_driver_tick+0x136>

		} else if (array_index == (message_length - 1)) // the end
     26a:	80 91 43 01 	lds	r24, 0x0143
     26e:	28 2f       	mov	r18, r24
     270:	30 e0       	ldi	r19, 0x00	; 0
     272:	80 91 45 01 	lds	r24, 0x0145
     276:	90 91 46 01 	lds	r25, 0x0146
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	28 17       	cp	r18, r24
     27e:	39 07       	cpc	r19, r25
     280:	b1 f4       	brne	.+44     	; 0x2ae <wan_driver_tick+0x136>
		{
			// Good message, check command
			switch (cmd)
     282:	80 91 47 01 	lds	r24, 0x0147
     286:	90 91 48 01 	lds	r25, 0x0148
     28a:	84 30       	cpi	r24, 0x04	; 4
     28c:	91 05       	cpc	r25, r1
     28e:	59 f4       	brne	.+22     	; 0x2a6 <wan_driver_tick+0x12e>
			{
			case 4:
				// we got device address
				//appConfig.wan_device_address = bytes_message;

				PORTD ^= _BV(PD7);
     290:	8b e2       	ldi	r24, 0x2B	; 43
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	2b e2       	ldi	r18, 0x2B	; 43
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	f9 01       	movw	r30, r18
     29a:	30 81       	ld	r19, Z
     29c:	20 e8       	ldi	r18, 0x80	; 128
     29e:	23 27       	eor	r18, r19
     2a0:	fc 01       	movw	r30, r24
     2a2:	20 83       	st	Z, r18
				break;
     2a4:	00 00       	nop
			}
			array_index = 0;
     2a6:	10 92 43 01 	sts	0x0143, r1
			message_index = 0;
     2aa:	10 92 44 01 	sts	0x0144, r1
		}
		array_index++;
     2ae:	80 91 43 01 	lds	r24, 0x0143
     2b2:	8f 5f       	subi	r24, 0xFF	; 255
     2b4:	80 93 43 01 	sts	0x0143, r24
		message_index++;
     2b8:	80 91 44 01 	lds	r24, 0x0144
     2bc:	8f 5f       	subi	r24, 0xFF	; 255
     2be:	80 93 44 01 	sts	0x0144, r24
	}
}
     2c2:	c0 5b       	subi	r28, 0xB0	; 176
     2c4:	df 4f       	sbci	r29, 0xFF	; 255
     2c6:	0f b6       	in	r0, 0x3f	; 63
     2c8:	f8 94       	cli
     2ca:	de bf       	out	0x3e, r29	; 62
     2cc:	0f be       	out	0x3f, r0	; 63
     2ce:	cd bf       	out	0x3d, r28	; 61
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	1f 91       	pop	r17
     2d6:	0f 91       	pop	r16
     2d8:	08 95       	ret

000002da <init_buffer>:

static void init_buffer()
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	cd b7       	in	r28, 0x3d	; 61
     2e0:	de b7       	in	r29, 0x3e	; 62
	wan_line_index = 0;
     2e2:	10 92 42 01 	sts	0x0142, r1
     2e6:	10 92 41 01 	sts	0x0141, r1
	memset(wan_line_buffer, '\0', sizeof(wan_line_buffer));
     2ea:	41 e8       	ldi	r20, 0x81	; 129
     2ec:	50 e0       	ldi	r21, 0x00	; 0
     2ee:	60 e0       	ldi	r22, 0x00	; 0
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	89 e5       	ldi	r24, 0x59	; 89
     2f4:	95 e0       	ldi	r25, 0x05	; 5
     2f6:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     2fa:	df 91       	pop	r29
     2fc:	cf 91       	pop	r28
     2fe:	08 95       	ret

00000300 <init_lines>:

static void init_lines()
{
     300:	cf 93       	push	r28
     302:	df 93       	push	r29
     304:	cd b7       	in	r28, 0x3d	; 61
     306:	de b7       	in	r29, 0x3e	; 62
	memset(wan_lines, '\0', sizeof(wan_lines));
     308:	41 e8       	ldi	r20, 0x81	; 129
     30a:	50 e0       	ldi	r21, 0x00	; 0
     30c:	60 e0       	ldi	r22, 0x00	; 0
     30e:	70 e0       	ldi	r23, 0x00	; 0
     310:	8a e1       	ldi	r24, 0x1A	; 26
     312:	96 e0       	ldi	r25, 0x06	; 6
     314:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <handle_data>:

bool handle_data()
{
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	1f 92       	push	r1
     324:	cd b7       	in	r28, 0x3d	; 61
     326:	de b7       	in	r29, 0x3e	; 62

	char c = wan_usart_data_read();
     328:	0e 94 78 04 	call	0x8f0	; 0x8f0 <wan_usart_data_read>
     32c:	89 83       	std	Y+1, r24	; 0x01

	// ignore null terminated strings
	if (c == '\0')
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	88 23       	and	r24, r24
     332:	11 f4       	brne	.+4      	; 0x338 <handle_data+0x1a>
		return false;
     334:	80 e0       	ldi	r24, 0x00	; 0
     336:	29 c0       	rjmp	.+82     	; 0x38a <handle_data+0x6c>
	// prevent buffer overrun
	if (wan_line_index >= WAN_MAX_CHARS)
     338:	80 91 41 01 	lds	r24, 0x0141
     33c:	90 91 42 01 	lds	r25, 0x0142
     340:	80 38       	cpi	r24, 0x80	; 128
     342:	91 05       	cpc	r25, r1
     344:	14 f0       	brlt	.+4      	; 0x34a <handle_data+0x2c>
		return false;
     346:	80 e0       	ldi	r24, 0x00	; 0
     348:	20 c0       	rjmp	.+64     	; 0x38a <handle_data+0x6c>

	// store character in btle_line_buffer
	wan_line_buffer[wan_line_index] = c;
     34a:	80 91 41 01 	lds	r24, 0x0141
     34e:	90 91 42 01 	lds	r25, 0x0142
     352:	87 5a       	subi	r24, 0xA7	; 167
     354:	9a 4f       	sbci	r25, 0xFA	; 250
     356:	29 81       	ldd	r18, Y+1	; 0x01
     358:	fc 01       	movw	r30, r24
     35a:	20 83       	st	Z, r18
	wan_line_index++;
     35c:	80 91 41 01 	lds	r24, 0x0141
     360:	90 91 42 01 	lds	r25, 0x0142
     364:	01 96       	adiw	r24, 0x01	; 1
     366:	90 93 42 01 	sts	0x0142, r25
     36a:	80 93 41 01 	sts	0x0141, r24

	// check for end of line
	if (c == WAN_TKEND)
     36e:	89 81       	ldd	r24, Y+1	; 0x01
     370:	8a 30       	cpi	r24, 0x0A	; 10
     372:	51 f4       	brne	.+20     	; 0x388 <handle_data+0x6a>
	{
		// copy new message into buffer
		strcpy(wan_lines, wan_line_buffer);
     374:	69 e5       	ldi	r22, 0x59	; 89
     376:	75 e0       	ldi	r23, 0x05	; 5
     378:	8a e1       	ldi	r24, 0x1A	; 26
     37a:	96 e0       	ldi	r25, 0x06	; 6
     37c:	0e 94 59 08 	call	0x10b2	; 0x10b2 <strcpy>
		init_buffer();
     380:	0e 94 6d 01 	call	0x2da	; 0x2da <init_buffer>
		return true;
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	01 c0       	rjmp	.+2      	; 0x38a <handle_data+0x6c>
	}

	return false;
     388:	80 e0       	ldi	r24, 0x00	; 0
}
     38a:	0f 90       	pop	r0
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	08 95       	ret

00000392 <parse_data>:

static uint8_t parse_data(char *token, char **out)
{
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	00 d0       	rcall	.+0      	; 0x398 <parse_data+0x6>
     398:	00 d0       	rcall	.+0      	; 0x39a <parse_data+0x8>
     39a:	00 d0       	rcall	.+0      	; 0x39c <parse_data+0xa>
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	9c 83       	std	Y+4, r25	; 0x04
     3a2:	8b 83       	std	Y+3, r24	; 0x03
     3a4:	7e 83       	std	Y+6, r23	; 0x06
     3a6:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t *ptr = NULL;
     3a8:	1a 82       	std	Y+2, r1	; 0x02
     3aa:	19 82       	std	Y+1, r1	; 0x01
	// TODO: review warning
	if ((ptr == strstr(wan_lines, token)))
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	bc 01       	movw	r22, r24
     3b2:	8a e1       	ldi	r24, 0x1A	; 26
     3b4:	96 e0       	ldi	r25, 0x06	; 6
     3b6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <strstr>
     3ba:	9c 01       	movw	r18, r24
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	9a 81       	ldd	r25, Y+2	; 0x02
     3c0:	28 17       	cp	r18, r24
     3c2:	39 07       	cpc	r19, r25
     3c4:	69 f4       	brne	.+26     	; 0x3e0 <parse_data+0x4e>
	{
		if (out != NULL )
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	9e 81       	ldd	r25, Y+6	; 0x06
     3ca:	00 97       	sbiw	r24, 0x00	; 0
     3cc:	39 f0       	breq	.+14     	; 0x3dc <parse_data+0x4a>
			*out = ptr;
     3ce:	8d 81       	ldd	r24, Y+5	; 0x05
     3d0:	9e 81       	ldd	r25, Y+6	; 0x06
     3d2:	29 81       	ldd	r18, Y+1	; 0x01
     3d4:	3a 81       	ldd	r19, Y+2	; 0x02
     3d6:	fc 01       	movw	r30, r24
     3d8:	31 83       	std	Z+1, r19	; 0x01
     3da:	20 83       	st	Z, r18
		return WAN_TKFOUND;
     3dc:	81 e0       	ldi	r24, 0x01	; 1
     3de:	01 c0       	rjmp	.+2      	; 0x3e2 <parse_data+0x50>
	} else
		return WAN_TKNOTFOUND;
     3e0:	80 e0       	ldi	r24, 0x00	; 0
}
     3e2:	26 96       	adiw	r28, 0x06	; 6
     3e4:	0f b6       	in	r0, 0x3f	; 63
     3e6:	f8 94       	cli
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	0f be       	out	0x3f, r0	; 63
     3ec:	cd bf       	out	0x3d, r28	; 61
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	08 95       	ret

000003f4 <wan_handle_packet>:

wan_msg_t wan_handle_packet(char * buffer)
{
     3f4:	cf 93       	push	r28
     3f6:	df 93       	push	r29
     3f8:	cd b7       	in	r28, 0x3d	; 61
     3fa:	de b7       	in	r29, 0x3e	; 62
     3fc:	61 97       	sbiw	r28, 0x11	; 17
     3fe:	0f b6       	in	r0, 0x3f	; 63
     400:	f8 94       	cli
     402:	de bf       	out	0x3e, r29	; 62
     404:	0f be       	out	0x3f, r0	; 63
     406:	cd bf       	out	0x3d, r28	; 61
     408:	9f 87       	std	Y+15, r25	; 0x0f
     40a:	8e 87       	std	Y+14, r24	; 0x0e
     40c:	79 8b       	std	Y+17, r23	; 0x11
     40e:	68 8b       	std	Y+16, r22	; 0x10
	wan_msg_t wan_msg;

	return wan_msg;
     410:	8e 85       	ldd	r24, Y+14	; 0x0e
     412:	9f 85       	ldd	r25, Y+15	; 0x0f
     414:	4d e0       	ldi	r20, 0x0D	; 13
     416:	9e 01       	movw	r18, r28
     418:	2f 5f       	subi	r18, 0xFF	; 255
     41a:	3f 4f       	sbci	r19, 0xFF	; 255
     41c:	f9 01       	movw	r30, r18
     41e:	dc 01       	movw	r26, r24
     420:	01 90       	ld	r0, Z+
     422:	0d 92       	st	X+, r0
     424:	4a 95       	dec	r20
     426:	e1 f7       	brne	.-8      	; 0x420 <wan_handle_packet+0x2c>

}
     428:	8e 85       	ldd	r24, Y+14	; 0x0e
     42a:	9f 85       	ldd	r25, Y+15	; 0x0f
     42c:	61 96       	adiw	r28, 0x11	; 17
     42e:	0f b6       	in	r0, 0x3f	; 63
     430:	f8 94       	cli
     432:	de bf       	out	0x3e, r29	; 62
     434:	0f be       	out	0x3f, r0	; 63
     436:	cd bf       	out	0x3d, r28	; 61
     438:	df 91       	pop	r29
     43a:	cf 91       	pop	r28
     43c:	08 95       	ret

0000043e <wan_parse_nybble>:

uint8_t wan_parse_nybble(char c)
{
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	00 d0       	rcall	.+0      	; 0x444 <wan_parse_nybble+0x6>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	8a 83       	std	Y+2, r24	; 0x02
	if (c >= 'A' && c <= 'F')
     44a:	8a 81       	ldd	r24, Y+2	; 0x02
     44c:	81 34       	cpi	r24, 0x41	; 65
     44e:	30 f0       	brcs	.+12     	; 0x45c <wan_parse_nybble+0x1e>
     450:	8a 81       	ldd	r24, Y+2	; 0x02
     452:	87 34       	cpi	r24, 0x47	; 71
     454:	18 f4       	brcc	.+6      	; 0x45c <wan_parse_nybble+0x1e>
		c = c | 0x20;
     456:	8a 81       	ldd	r24, Y+2	; 0x02
     458:	80 62       	ori	r24, 0x20	; 32
     45a:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8_t i = 0; i < 16; i++)
     45c:	19 82       	std	Y+1, r1	; 0x01
     45e:	0f c0       	rjmp	.+30     	; 0x47e <wan_parse_nybble+0x40>
	{
		if (WAN_HEX_DIGITS[i] == c)
     460:	89 81       	ldd	r24, Y+1	; 0x01
     462:	88 2f       	mov	r24, r24
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	80 50       	subi	r24, 0x00	; 0
     468:	9f 4f       	sbci	r25, 0xFF	; 255
     46a:	fc 01       	movw	r30, r24
     46c:	90 81       	ld	r25, Z
     46e:	8a 81       	ldd	r24, Y+2	; 0x02
     470:	98 17       	cp	r25, r24
     472:	11 f4       	brne	.+4      	; 0x478 <wan_parse_nybble+0x3a>
			return i;
     474:	89 81       	ldd	r24, Y+1	; 0x01
     476:	07 c0       	rjmp	.+14     	; 0x486 <wan_parse_nybble+0x48>

uint8_t wan_parse_nybble(char c)
{
	if (c >= 'A' && c <= 'F')
		c = c | 0x20;
	for (uint8_t i = 0; i < 16; i++)
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	89 83       	std	Y+1, r24	; 0x01
     47e:	89 81       	ldd	r24, Y+1	; 0x01
     480:	80 31       	cpi	r24, 0x10	; 16
     482:	70 f3       	brcs	.-36     	; 0x460 <wan_parse_nybble+0x22>
	{
		if (WAN_HEX_DIGITS[i] == c)
			return i;
	}
	return 0x80;
     484:	80 e8       	ldi	r24, 0x80	; 128
}
     486:	0f 90       	pop	r0
     488:	0f 90       	pop	r0
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	08 95       	ret

00000490 <_btle_set_rx_cb>:
const unsigned char BTLE_hex[] PROGMEM = "0123456789ABCDEF";

btle_rx_cb_t btle_rx_cb;

void _btle_set_rx_cb(btle_rx_cb_t cb)
{
     490:	cf 93       	push	r28
     492:	df 93       	push	r29
     494:	00 d0       	rcall	.+0      	; 0x496 <_btle_set_rx_cb+0x6>
     496:	cd b7       	in	r28, 0x3d	; 61
     498:	de b7       	in	r29, 0x3e	; 62
     49a:	9a 83       	std	Y+2, r25	; 0x02
     49c:	89 83       	std	Y+1, r24	; 0x01
	btle_rx_cb = cb;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	90 93 dc 06 	sts	0x06DC, r25
     4a6:	80 93 db 06 	sts	0x06DB, r24
}
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	df 91       	pop	r29
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <btle_usart_init>:

void btle_usart_init()
{
     4b4:	cf 93       	push	r28
     4b6:	df 93       	push	r29
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
	UBRR1H = UBRRH_VALUE;
     4bc:	8d ec       	ldi	r24, 0xCD	; 205
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	fc 01       	movw	r30, r24
     4c2:	10 82       	st	Z, r1
	UBRR1L = UBRRL_VALUE;
     4c4:	8c ec       	ldi	r24, 0xCC	; 204
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	2c e0       	ldi	r18, 0x0C	; 12
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     4ce:	89 ec       	ldi	r24, 0xC9	; 201
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	29 ec       	ldi	r18, 0xC9	; 201
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	f9 01       	movw	r30, r18
     4d8:	20 81       	ld	r18, Z
     4da:	28 68       	ori	r18, 0x88	; 136
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     4e0:	89 ec       	ldi	r24, 0xC9	; 201
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	29 ec       	ldi	r18, 0xC9	; 201
     4e6:	30 e0       	ldi	r19, 0x00	; 0
     4e8:	f9 01       	movw	r30, r18
     4ea:	20 81       	ld	r18, Z
     4ec:	28 61       	ori	r18, 0x18	; 24
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     4f2:	8a ec       	ldi	r24, 0xCA	; 202
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	2a ec       	ldi	r18, 0xCA	; 202
     4f8:	30 e0       	ldi	r19, 0x00	; 0
     4fa:	f9 01       	movw	r30, r18
     4fc:	20 81       	ld	r18, Z
     4fe:	26 60       	ori	r18, 0x06	; 6
     500:	fc 01       	movw	r30, r24
     502:	20 83       	st	Z, r18
}
     504:	df 91       	pop	r29
     506:	cf 91       	pop	r28
     508:	08 95       	ret

0000050a <btle_usart_init_cb>:

// not in use at this time
void btle_usart_init_cb(btle_rx_cb_t cb)
{
     50a:	cf 93       	push	r28
     50c:	df 93       	push	r29
     50e:	00 d0       	rcall	.+0      	; 0x510 <btle_usart_init_cb+0x6>
     510:	cd b7       	in	r28, 0x3d	; 61
     512:	de b7       	in	r29, 0x3e	; 62
     514:	9a 83       	std	Y+2, r25	; 0x02
     516:	89 83       	std	Y+1, r24	; 0x01
	UBRR1H = UBRRH_VALUE;
     518:	8d ec       	ldi	r24, 0xCD	; 205
     51a:	90 e0       	ldi	r25, 0x00	; 0
     51c:	fc 01       	movw	r30, r24
     51e:	10 82       	st	Z, r1
	UBRR1L = UBRRL_VALUE;
     520:	8c ec       	ldi	r24, 0xCC	; 204
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	2c e0       	ldi	r18, 0x0C	; 12
     526:	fc 01       	movw	r30, r24
     528:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR1B |= (1<<RXCIE1) | (1<<TXEN1);
     52a:	89 ec       	ldi	r24, 0xC9	; 201
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	29 ec       	ldi	r18, 0xC9	; 201
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	f9 01       	movw	r30, r18
     534:	20 81       	ld	r18, Z
     536:	28 68       	ori	r18, 0x88	; 136
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR1B |= (1 << RXEN1) | (1 << TXEN1);
     53c:	89 ec       	ldi	r24, 0xC9	; 201
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	29 ec       	ldi	r18, 0xC9	; 201
     542:	30 e0       	ldi	r19, 0x00	; 0
     544:	f9 01       	movw	r30, r18
     546:	20 81       	ld	r18, Z
     548:	28 61       	ori	r18, 0x18	; 24
     54a:	fc 01       	movw	r30, r24
     54c:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR1C |= (1 << UCSZ11) | (1 << UCSZ10);
     54e:	8a ec       	ldi	r24, 0xCA	; 202
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	2a ec       	ldi	r18, 0xCA	; 202
     554:	30 e0       	ldi	r19, 0x00	; 0
     556:	f9 01       	movw	r30, r18
     558:	20 81       	ld	r18, Z
     55a:	26 60       	ori	r18, 0x06	; 6
     55c:	fc 01       	movw	r30, r24
     55e:	20 83       	st	Z, r18

	_btle_set_rx_cb(cb);
     560:	89 81       	ldd	r24, Y+1	; 0x01
     562:	9a 81       	ldd	r25, Y+2	; 0x02
     564:	0e 94 48 02 	call	0x490	; 0x490 <_btle_set_rx_cb>
}
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	df 91       	pop	r29
     56e:	cf 91       	pop	r28
     570:	08 95       	ret

00000572 <btle_usart_put_char>:

void btle_usart_put_char(unsigned char c)
{
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <btle_usart_put_char+0x6>
     578:	1f 92       	push	r1
     57a:	cd b7       	in	r28, 0x3d	; 61
     57c:	de b7       	in	r29, 0x3e	; 62
     57e:	8b 83       	std	Y+3, r24	; 0x03
	int i = (unsigned int)(btle_buffer.head + 1) % BTLE_RX_BUFFER_SIZE;
     580:	80 91 49 03 	lds	r24, 0x0349
     584:	90 91 4a 03 	lds	r25, 0x034A
     588:	01 96       	adiw	r24, 0x01	; 1
     58a:	91 70       	andi	r25, 0x01	; 1
     58c:	9a 83       	std	Y+2, r25	; 0x02
     58e:	89 83       	std	Y+1, r24	; 0x01

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != btle_buffer.tail) {
     590:	20 91 4b 03 	lds	r18, 0x034B
     594:	30 91 4c 03 	lds	r19, 0x034C
     598:	89 81       	ldd	r24, Y+1	; 0x01
     59a:	9a 81       	ldd	r25, Y+2	; 0x02
     59c:	28 17       	cp	r18, r24
     59e:	39 07       	cpc	r19, r25
     5a0:	79 f0       	breq	.+30     	; 0x5c0 <btle_usart_put_char+0x4e>
		btle_buffer.buffer[btle_buffer.head] = c;
     5a2:	80 91 49 03 	lds	r24, 0x0349
     5a6:	90 91 4a 03 	lds	r25, 0x034A
     5aa:	87 5b       	subi	r24, 0xB7	; 183
     5ac:	9e 4f       	sbci	r25, 0xFE	; 254
     5ae:	2b 81       	ldd	r18, Y+3	; 0x03
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
		btle_buffer.head = i;
     5b4:	89 81       	ldd	r24, Y+1	; 0x01
     5b6:	9a 81       	ldd	r25, Y+2	; 0x02
     5b8:	90 93 4a 03 	sts	0x034A, r25
     5bc:	80 93 49 03 	sts	0x0349, r24
		//wan_usart_transmit_string("New buffer input\r\n");
	}
}
     5c0:	0f 90       	pop	r0
     5c2:	0f 90       	pop	r0
     5c4:	0f 90       	pop	r0
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <btle_usart_clear_buffer>:


void btle_usart_clear_buffer()
{
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
	memset(&btle_buffer, 0, sizeof(BTLE_BUFFER));
     5d4:	44 e0       	ldi	r20, 0x04	; 4
     5d6:	52 e0       	ldi	r21, 0x02	; 2
     5d8:	60 e0       	ldi	r22, 0x00	; 0
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	89 e4       	ldi	r24, 0x49	; 73
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	08 95       	ret

000005ea <btle_usart_data_available>:

uint8_t btle_usart_data_available()
{
     5ea:	cf 93       	push	r28
     5ec:	df 93       	push	r29
     5ee:	cd b7       	in	r28, 0x3d	; 61
     5f0:	de b7       	in	r29, 0x3e	; 62
	return (uint8_t)(BTLE_RX_BUFFER_SIZE + btle_buffer.head - btle_buffer.tail) % BTLE_RX_BUFFER_SIZE;
     5f2:	80 91 49 03 	lds	r24, 0x0349
     5f6:	90 91 4a 03 	lds	r25, 0x034A
     5fa:	28 2f       	mov	r18, r24
     5fc:	80 91 4b 03 	lds	r24, 0x034B
     600:	90 91 4c 03 	lds	r25, 0x034C
     604:	92 2f       	mov	r25, r18
     606:	98 1b       	sub	r25, r24
     608:	89 2f       	mov	r24, r25
}
     60a:	df 91       	pop	r29
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <btle_usart_data_read>:

uint8_t btle_usart_data_read(void)
{
     610:	cf 93       	push	r28
     612:	df 93       	push	r29
     614:	1f 92       	push	r1
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
	// if the head isn't ahead of the tail, we don't have any characters
	if (btle_buffer.head == btle_buffer.tail) {
     61a:	20 91 49 03 	lds	r18, 0x0349
     61e:	30 91 4a 03 	lds	r19, 0x034A
     622:	80 91 4b 03 	lds	r24, 0x034B
     626:	90 91 4c 03 	lds	r25, 0x034C
     62a:	28 17       	cp	r18, r24
     62c:	39 07       	cpc	r19, r25
     62e:	11 f4       	brne	.+4      	; 0x634 <btle_usart_data_read+0x24>
		return -1;
     630:	8f ef       	ldi	r24, 0xFF	; 255
     632:	14 c0       	rjmp	.+40     	; 0x65c <btle_usart_data_read+0x4c>
	} else {
		uint8_t c = btle_buffer.buffer[btle_buffer.tail];
     634:	80 91 4b 03 	lds	r24, 0x034B
     638:	90 91 4c 03 	lds	r25, 0x034C
     63c:	87 5b       	subi	r24, 0xB7	; 183
     63e:	9e 4f       	sbci	r25, 0xFE	; 254
     640:	fc 01       	movw	r30, r24
     642:	80 81       	ld	r24, Z
     644:	89 83       	std	Y+1, r24	; 0x01
		btle_buffer.tail = (unsigned int)(btle_buffer.tail + 1) % BTLE_RX_BUFFER_SIZE;
     646:	80 91 4b 03 	lds	r24, 0x034B
     64a:	90 91 4c 03 	lds	r25, 0x034C
     64e:	01 96       	adiw	r24, 0x01	; 1
     650:	91 70       	andi	r25, 0x01	; 1
     652:	90 93 4c 03 	sts	0x034C, r25
     656:	80 93 4b 03 	sts	0x034B, r24
		return c;
     65a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     65c:	0f 90       	pop	r0
     65e:	df 91       	pop	r29
     660:	cf 91       	pop	r28
     662:	08 95       	ret

00000664 <btle_usart_transmit>:

void btle_usart_transmit(uint8_t data )
{
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	1f 92       	push	r1
     66a:	cd b7       	in	r28, 0x3d	; 61
     66c:	de b7       	in	r29, 0x3e	; 62
     66e:	89 83       	std	Y+1, r24	; 0x01
	while (!( UCSR1A & (1<<UDRE1)));
     670:	00 00       	nop
     672:	88 ec       	ldi	r24, 0xC8	; 200
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	fc 01       	movw	r30, r24
     678:	80 81       	ld	r24, Z
     67a:	88 2f       	mov	r24, r24
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	80 72       	andi	r24, 0x20	; 32
     680:	99 27       	eor	r25, r25
     682:	00 97       	sbiw	r24, 0x00	; 0
     684:	b1 f3       	breq	.-20     	; 0x672 <btle_usart_transmit+0xe>
	UDR1 = data;
     686:	8e ec       	ldi	r24, 0xCE	; 206
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	29 81       	ldd	r18, Y+1	; 0x01
     68c:	fc 01       	movw	r30, r24
     68e:	20 83       	st	Z, r18
}
     690:	0f 90       	pop	r0
     692:	df 91       	pop	r29
     694:	cf 91       	pop	r28
     696:	08 95       	ret

00000698 <btle_usart_transmit_bytes>:

void btle_usart_transmit_bytes(uint8_t data[], int size)
{
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	00 d0       	rcall	.+0      	; 0x69e <btle_usart_transmit_bytes+0x6>
     69e:	00 d0       	rcall	.+0      	; 0x6a0 <btle_usart_transmit_bytes+0x8>
     6a0:	00 d0       	rcall	.+0      	; 0x6a2 <btle_usart_transmit_bytes+0xa>
     6a2:	cd b7       	in	r28, 0x3d	; 61
     6a4:	de b7       	in	r29, 0x3e	; 62
     6a6:	9c 83       	std	Y+4, r25	; 0x04
     6a8:	8b 83       	std	Y+3, r24	; 0x03
     6aa:	7e 83       	std	Y+6, r23	; 0x06
     6ac:	6d 83       	std	Y+5, r22	; 0x05
	for (int i=0;i<size;i++)
     6ae:	1a 82       	std	Y+2, r1	; 0x02
     6b0:	19 82       	std	Y+1, r1	; 0x01
     6b2:	1c c0       	rjmp	.+56     	; 0x6ec <btle_usart_transmit_bytes+0x54>
	{
		while (!( UCSR1A & (1<<UDRE1)));
     6b4:	00 00       	nop
     6b6:	88 ec       	ldi	r24, 0xC8	; 200
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	fc 01       	movw	r30, r24
     6bc:	80 81       	ld	r24, Z
     6be:	88 2f       	mov	r24, r24
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	80 72       	andi	r24, 0x20	; 32
     6c4:	99 27       	eor	r25, r25
     6c6:	00 97       	sbiw	r24, 0x00	; 0
     6c8:	b1 f3       	breq	.-20     	; 0x6b6 <btle_usart_transmit_bytes+0x1e>
		UDR1 = data[i];
     6ca:	8e ec       	ldi	r24, 0xCE	; 206
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	29 81       	ldd	r18, Y+1	; 0x01
     6d0:	3a 81       	ldd	r19, Y+2	; 0x02
     6d2:	4b 81       	ldd	r20, Y+3	; 0x03
     6d4:	5c 81       	ldd	r21, Y+4	; 0x04
     6d6:	24 0f       	add	r18, r20
     6d8:	35 1f       	adc	r19, r21
     6da:	f9 01       	movw	r30, r18
     6dc:	20 81       	ld	r18, Z
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
	UDR1 = data;
}

void btle_usart_transmit_bytes(uint8_t data[], int size)
{
	for (int i=0;i<size;i++)
     6e2:	89 81       	ldd	r24, Y+1	; 0x01
     6e4:	9a 81       	ldd	r25, Y+2	; 0x02
     6e6:	01 96       	adiw	r24, 0x01	; 1
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	29 81       	ldd	r18, Y+1	; 0x01
     6ee:	3a 81       	ldd	r19, Y+2	; 0x02
     6f0:	8d 81       	ldd	r24, Y+5	; 0x05
     6f2:	9e 81       	ldd	r25, Y+6	; 0x06
     6f4:	28 17       	cp	r18, r24
     6f6:	39 07       	cpc	r19, r25
     6f8:	ec f2       	brlt	.-70     	; 0x6b4 <btle_usart_transmit_bytes+0x1c>
	{
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = data[i];
	}
}
     6fa:	26 96       	adiw	r28, 0x06	; 6
     6fc:	0f b6       	in	r0, 0x3f	; 63
     6fe:	f8 94       	cli
     700:	de bf       	out	0x3e, r29	; 62
     702:	0f be       	out	0x3f, r0	; 63
     704:	cd bf       	out	0x3d, r28	; 61
     706:	df 91       	pop	r29
     708:	cf 91       	pop	r28
     70a:	08 95       	ret

0000070c <btle_usart_transmit_string>:

void btle_usart_transmit_string(char * data)
{
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	00 d0       	rcall	.+0      	; 0x712 <btle_usart_transmit_string+0x6>
     712:	1f 92       	push	r1
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	9b 83       	std	Y+3, r25	; 0x03
     71a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c = *data;
     71c:	8a 81       	ldd	r24, Y+2	; 0x02
     71e:	9b 81       	ldd	r25, Y+3	; 0x03
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	89 83       	std	Y+1, r24	; 0x01

	while (c) {
     726:	1a c0       	rjmp	.+52     	; 0x75c <btle_usart_transmit_string+0x50>
		while (!( UCSR1A & (1<<UDRE1)));
     728:	00 00       	nop
     72a:	88 ec       	ldi	r24, 0xC8	; 200
     72c:	90 e0       	ldi	r25, 0x00	; 0
     72e:	fc 01       	movw	r30, r24
     730:	80 81       	ld	r24, Z
     732:	88 2f       	mov	r24, r24
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	80 72       	andi	r24, 0x20	; 32
     738:	99 27       	eor	r25, r25
     73a:	00 97       	sbiw	r24, 0x00	; 0
     73c:	b1 f3       	breq	.-20     	; 0x72a <btle_usart_transmit_string+0x1e>
		UDR1 = c;
     73e:	8e ec       	ldi	r24, 0xCE	; 206
     740:	90 e0       	ldi	r25, 0x00	; 0
     742:	29 81       	ldd	r18, Y+1	; 0x01
     744:	fc 01       	movw	r30, r24
     746:	20 83       	st	Z, r18
		c = *(++data);
     748:	8a 81       	ldd	r24, Y+2	; 0x02
     74a:	9b 81       	ldd	r25, Y+3	; 0x03
     74c:	01 96       	adiw	r24, 0x01	; 1
     74e:	9b 83       	std	Y+3, r25	; 0x03
     750:	8a 83       	std	Y+2, r24	; 0x02
     752:	8a 81       	ldd	r24, Y+2	; 0x02
     754:	9b 81       	ldd	r25, Y+3	; 0x03
     756:	fc 01       	movw	r30, r24
     758:	80 81       	ld	r24, Z
     75a:	89 83       	std	Y+1, r24	; 0x01

void btle_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c) {
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	88 23       	and	r24, r24
     760:	19 f7       	brne	.-58     	; 0x728 <btle_usart_transmit_string+0x1c>
		while (!( UCSR1A & (1<<UDRE1)));
		UDR1 = c;
		c = *(++data);
	}
}
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	df 91       	pop	r29
     76a:	cf 91       	pop	r28
     76c:	08 95       	ret

0000076e <__vector_28>:

ISR(BTLE_ISR_VECTOR)
{
     76e:	1f 92       	push	r1
     770:	0f 92       	push	r0
     772:	00 90 5f 00 	lds	r0, 0x005F
     776:	0f 92       	push	r0
     778:	11 24       	eor	r1, r1
     77a:	00 90 5b 00 	lds	r0, 0x005B
     77e:	0f 92       	push	r0
     780:	2f 93       	push	r18
     782:	3f 93       	push	r19
     784:	4f 93       	push	r20
     786:	5f 93       	push	r21
     788:	6f 93       	push	r22
     78a:	7f 93       	push	r23
     78c:	8f 93       	push	r24
     78e:	9f 93       	push	r25
     790:	af 93       	push	r26
     792:	bf 93       	push	r27
     794:	ef 93       	push	r30
     796:	ff 93       	push	r31
     798:	cf 93       	push	r28
     79a:	df 93       	push	r29
     79c:	1f 92       	push	r1
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
	char data = UDR1;
     7a2:	8e ec       	ldi	r24, 0xCE	; 206
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	fc 01       	movw	r30, r24
     7a8:	80 81       	ld	r24, Z
     7aa:	89 83       	std	Y+1, r24	; 0x01
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	btle_usart_put_char(data);
     7ac:	89 81       	ldd	r24, Y+1	; 0x01
     7ae:	0e 94 b9 02 	call	0x572	; 0x572 <btle_usart_put_char>
	//PORTD ^= _BV(PD7);

	// debug callback to main program
	if (btle_rx_cb != 0)
     7b2:	80 91 db 06 	lds	r24, 0x06DB
     7b6:	90 91 dc 06 	lds	r25, 0x06DC
     7ba:	00 97       	sbiw	r24, 0x00	; 0
     7bc:	39 f0       	breq	.+14     	; 0x7cc <__vector_28+0x5e>
	{
		btle_rx_cb(data);
     7be:	20 91 db 06 	lds	r18, 0x06DB
     7c2:	30 91 dc 06 	lds	r19, 0x06DC
     7c6:	89 81       	ldd	r24, Y+1	; 0x01
     7c8:	f9 01       	movw	r30, r18
     7ca:	09 95       	icall
	}
}
     7cc:	0f 90       	pop	r0
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	ff 91       	pop	r31
     7d4:	ef 91       	pop	r30
     7d6:	bf 91       	pop	r27
     7d8:	af 91       	pop	r26
     7da:	9f 91       	pop	r25
     7dc:	8f 91       	pop	r24
     7de:	7f 91       	pop	r23
     7e0:	6f 91       	pop	r22
     7e2:	5f 91       	pop	r21
     7e4:	4f 91       	pop	r20
     7e6:	3f 91       	pop	r19
     7e8:	2f 91       	pop	r18
     7ea:	0f 90       	pop	r0
     7ec:	00 92 5b 00 	sts	0x005B, r0
     7f0:	0f 90       	pop	r0
     7f2:	00 92 5f 00 	sts	0x005F, r0
     7f6:	0f 90       	pop	r0
     7f8:	1f 90       	pop	r1
     7fa:	18 95       	reti

000007fc <wan_usart_init>:
#include "usart_btle.h"

WAN_BUFFER wan_buffer = { { 0 }, 0, 0 };

void wan_usart_init()
{
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
	UBRR0H = UBRRH_VALUE;
     804:	85 ec       	ldi	r24, 0xC5	; 197
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	fc 01       	movw	r30, r24
     80a:	10 82       	st	Z, r1
	UBRR0L = UBRRL_VALUE;
     80c:	84 ec       	ldi	r24, 0xC4	; 196
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	2c e0       	ldi	r18, 0x0C	; 12
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18

	// Enble receiver and transmitter
	UCSR0B |= (1 << RXCIE0) | (1 << TXEN0);
     816:	81 ec       	ldi	r24, 0xC1	; 193
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	21 ec       	ldi	r18, 0xC1	; 193
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	f9 01       	movw	r30, r18
     820:	20 81       	ld	r18, Z
     822:	28 68       	ori	r18, 0x88	; 136
     824:	fc 01       	movw	r30, r24
     826:	20 83       	st	Z, r18

	// Set rx and tx enable bits
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
     828:	81 ec       	ldi	r24, 0xC1	; 193
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	21 ec       	ldi	r18, 0xC1	; 193
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	f9 01       	movw	r30, r18
     832:	20 81       	ld	r18, Z
     834:	28 61       	ori	r18, 0x18	; 24
     836:	fc 01       	movw	r30, r24
     838:	20 83       	st	Z, r18
	// Set databits to 8
	UCSR0C |= (1 << UCSZ01) | (1 << UCSZ00);
     83a:	82 ec       	ldi	r24, 0xC2	; 194
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	22 ec       	ldi	r18, 0xC2	; 194
     840:	30 e0       	ldi	r19, 0x00	; 0
     842:	f9 01       	movw	r30, r18
     844:	20 81       	ld	r18, Z
     846:	26 60       	ori	r18, 0x06	; 6
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
}
     84c:	df 91       	pop	r29
     84e:	cf 91       	pop	r28
     850:	08 95       	ret

00000852 <wan_usart_put_char>:

void wan_usart_put_char(unsigned char c)
{
     852:	cf 93       	push	r28
     854:	df 93       	push	r29
     856:	00 d0       	rcall	.+0      	; 0x858 <wan_usart_put_char+0x6>
     858:	1f 92       	push	r1
     85a:	cd b7       	in	r28, 0x3d	; 61
     85c:	de b7       	in	r29, 0x3e	; 62
     85e:	8b 83       	std	Y+3, r24	; 0x03
	int i = (unsigned int) (wan_buffer.head + 1) % WAN_RX_BUFFER_SIZE;
     860:	80 91 4d 05 	lds	r24, 0x054D
     864:	90 91 4e 05 	lds	r25, 0x054E
     868:	01 96       	adiw	r24, 0x01	; 1
     86a:	91 70       	andi	r25, 0x01	; 1
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01

	// if we should be storing the received character into the location
	// just before the tail (meaning that the head would advance to the
	// current location of the tail), we're about to overflow the buffer
	// and so we don't write the character or advance the head.
	if (i != wan_buffer.tail)
     870:	20 91 4f 05 	lds	r18, 0x054F
     874:	30 91 50 05 	lds	r19, 0x0550
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	28 17       	cp	r18, r24
     87e:	39 07       	cpc	r19, r25
     880:	79 f0       	breq	.+30     	; 0x8a0 <wan_usart_put_char+0x4e>
	{
		wan_buffer.buffer[wan_buffer.head] = c;
     882:	80 91 4d 05 	lds	r24, 0x054D
     886:	90 91 4e 05 	lds	r25, 0x054E
     88a:	83 5b       	subi	r24, 0xB3	; 179
     88c:	9c 4f       	sbci	r25, 0xFC	; 252
     88e:	2b 81       	ldd	r18, Y+3	; 0x03
     890:	fc 01       	movw	r30, r24
     892:	20 83       	st	Z, r18
		wan_buffer.head = i;
     894:	89 81       	ldd	r24, Y+1	; 0x01
     896:	9a 81       	ldd	r25, Y+2	; 0x02
     898:	90 93 4e 05 	sts	0x054E, r25
     89c:	80 93 4d 05 	sts	0x054D, r24
	}
}
     8a0:	0f 90       	pop	r0
     8a2:	0f 90       	pop	r0
     8a4:	0f 90       	pop	r0
     8a6:	df 91       	pop	r29
     8a8:	cf 91       	pop	r28
     8aa:	08 95       	ret

000008ac <wan_usart_clear_buffer>:

void wan_usart_clear_buffer()
{
     8ac:	cf 93       	push	r28
     8ae:	df 93       	push	r29
     8b0:	cd b7       	in	r28, 0x3d	; 61
     8b2:	de b7       	in	r29, 0x3e	; 62
	memset(&wan_buffer, 0, sizeof(WAN_BUFFER));
     8b4:	44 e0       	ldi	r20, 0x04	; 4
     8b6:	52 e0       	ldi	r21, 0x02	; 2
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	70 e0       	ldi	r23, 0x00	; 0
     8bc:	8d e4       	ldi	r24, 0x4D	; 77
     8be:	93 e0       	ldi	r25, 0x03	; 3
     8c0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     8c4:	df 91       	pop	r29
     8c6:	cf 91       	pop	r28
     8c8:	08 95       	ret

000008ca <wan_usart_data_available>:

uint8_t wan_usart_data_available(void)
{
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
	return (uint8_t) (WAN_RX_BUFFER_SIZE + wan_buffer.head - wan_buffer.tail)
     8d2:	80 91 4d 05 	lds	r24, 0x054D
     8d6:	90 91 4e 05 	lds	r25, 0x054E
     8da:	28 2f       	mov	r18, r24
     8dc:	80 91 4f 05 	lds	r24, 0x054F
     8e0:	90 91 50 05 	lds	r25, 0x0550
     8e4:	92 2f       	mov	r25, r18
     8e6:	98 1b       	sub	r25, r24
     8e8:	89 2f       	mov	r24, r25
			% WAN_RX_BUFFER_SIZE;
}
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <wan_usart_data_read>:

uint8_t wan_usart_data_read(void)
{
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	1f 92       	push	r1
     8f6:	cd b7       	in	r28, 0x3d	; 61
     8f8:	de b7       	in	r29, 0x3e	; 62
	// if the head isn't ahead of the tail, we don't have any characters
	if (wan_buffer.head == wan_buffer.tail)
     8fa:	20 91 4d 05 	lds	r18, 0x054D
     8fe:	30 91 4e 05 	lds	r19, 0x054E
     902:	80 91 4f 05 	lds	r24, 0x054F
     906:	90 91 50 05 	lds	r25, 0x0550
     90a:	28 17       	cp	r18, r24
     90c:	39 07       	cpc	r19, r25
     90e:	11 f4       	brne	.+4      	; 0x914 <wan_usart_data_read+0x24>
	{
		return -1;
     910:	8f ef       	ldi	r24, 0xFF	; 255
     912:	14 c0       	rjmp	.+40     	; 0x93c <wan_usart_data_read+0x4c>
	} else
	{
		uint8_t c = wan_buffer.buffer[wan_buffer.tail];
     914:	80 91 4f 05 	lds	r24, 0x054F
     918:	90 91 50 05 	lds	r25, 0x0550
     91c:	83 5b       	subi	r24, 0xB3	; 179
     91e:	9c 4f       	sbci	r25, 0xFC	; 252
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	89 83       	std	Y+1, r24	; 0x01
		wan_buffer.tail = (unsigned int) (wan_buffer.tail + 1)
     926:	80 91 4f 05 	lds	r24, 0x054F
     92a:	90 91 50 05 	lds	r25, 0x0550
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	91 70       	andi	r25, 0x01	; 1
     932:	90 93 50 05 	sts	0x0550, r25
     936:	80 93 4f 05 	sts	0x054F, r24
				% WAN_RX_BUFFER_SIZE;
		return c;
     93a:	89 81       	ldd	r24, Y+1	; 0x01
	}
}
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <wan_usart_transmit>:

void wan_usart_transmit(uint8_t data)
{
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	1f 92       	push	r1
     94a:	cd b7       	in	r28, 0x3d	; 61
     94c:	de b7       	in	r29, 0x3e	; 62
     94e:	89 83       	std	Y+1, r24	; 0x01
	while (!(UCSR0A & (1 << UDRE0)))
     950:	00 00       	nop
     952:	80 ec       	ldi	r24, 0xC0	; 192
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	88 2f       	mov	r24, r24
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	80 72       	andi	r24, 0x20	; 32
     960:	99 27       	eor	r25, r25
     962:	00 97       	sbiw	r24, 0x00	; 0
     964:	b1 f3       	breq	.-20     	; 0x952 <wan_usart_transmit+0xe>
		;
	UDR0 = data;
     966:	86 ec       	ldi	r24, 0xC6	; 198
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	29 81       	ldd	r18, Y+1	; 0x01
     96c:	fc 01       	movw	r30, r24
     96e:	20 83       	st	Z, r18
}
     970:	0f 90       	pop	r0
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <wan_usart_transmit_bytes>:

void wan_usart_transmit_bytes(char data[], int size)
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	00 d0       	rcall	.+0      	; 0x97e <wan_usart_transmit_bytes+0x6>
     97e:	00 d0       	rcall	.+0      	; 0x980 <wan_usart_transmit_bytes+0x8>
     980:	00 d0       	rcall	.+0      	; 0x982 <wan_usart_transmit_bytes+0xa>
     982:	cd b7       	in	r28, 0x3d	; 61
     984:	de b7       	in	r29, 0x3e	; 62
     986:	9c 83       	std	Y+4, r25	; 0x04
     988:	8b 83       	std	Y+3, r24	; 0x03
     98a:	7e 83       	std	Y+6, r23	; 0x06
     98c:	6d 83       	std	Y+5, r22	; 0x05
	for (int i = 0; i < size; i++)
     98e:	1a 82       	std	Y+2, r1	; 0x02
     990:	19 82       	std	Y+1, r1	; 0x01
     992:	1c c0       	rjmp	.+56     	; 0x9cc <wan_usart_transmit_bytes+0x54>
	{
		while (!(UCSR0A & (1 << UDRE0)))
     994:	00 00       	nop
     996:	80 ec       	ldi	r24, 0xC0	; 192
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	fc 01       	movw	r30, r24
     99c:	80 81       	ld	r24, Z
     99e:	88 2f       	mov	r24, r24
     9a0:	90 e0       	ldi	r25, 0x00	; 0
     9a2:	80 72       	andi	r24, 0x20	; 32
     9a4:	99 27       	eor	r25, r25
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	b1 f3       	breq	.-20     	; 0x996 <wan_usart_transmit_bytes+0x1e>
			;
		UDR0 = data[i];
     9aa:	86 ec       	ldi	r24, 0xC6	; 198
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	29 81       	ldd	r18, Y+1	; 0x01
     9b0:	3a 81       	ldd	r19, Y+2	; 0x02
     9b2:	4b 81       	ldd	r20, Y+3	; 0x03
     9b4:	5c 81       	ldd	r21, Y+4	; 0x04
     9b6:	24 0f       	add	r18, r20
     9b8:	35 1f       	adc	r19, r21
     9ba:	f9 01       	movw	r30, r18
     9bc:	20 81       	ld	r18, Z
     9be:	fc 01       	movw	r30, r24
     9c0:	20 83       	st	Z, r18
	UDR0 = data;
}

void wan_usart_transmit_bytes(char data[], int size)
{
	for (int i = 0; i < size; i++)
     9c2:	89 81       	ldd	r24, Y+1	; 0x01
     9c4:	9a 81       	ldd	r25, Y+2	; 0x02
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	29 81       	ldd	r18, Y+1	; 0x01
     9ce:	3a 81       	ldd	r19, Y+2	; 0x02
     9d0:	8d 81       	ldd	r24, Y+5	; 0x05
     9d2:	9e 81       	ldd	r25, Y+6	; 0x06
     9d4:	28 17       	cp	r18, r24
     9d6:	39 07       	cpc	r19, r25
     9d8:	ec f2       	brlt	.-70     	; 0x994 <wan_usart_transmit_bytes+0x1c>
	{
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = data[i];
	}
}
     9da:	26 96       	adiw	r28, 0x06	; 6
     9dc:	0f b6       	in	r0, 0x3f	; 63
     9de:	f8 94       	cli
     9e0:	de bf       	out	0x3e, r29	; 62
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	cd bf       	out	0x3d, r28	; 61
     9e6:	df 91       	pop	r29
     9e8:	cf 91       	pop	r28
     9ea:	08 95       	ret

000009ec <wan_usart_transmit_string>:

void wan_usart_transmit_string(char * data)
{
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	00 d0       	rcall	.+0      	; 0x9f2 <wan_usart_transmit_string+0x6>
     9f2:	1f 92       	push	r1
     9f4:	cd b7       	in	r28, 0x3d	; 61
     9f6:	de b7       	in	r29, 0x3e	; 62
     9f8:	9b 83       	std	Y+3, r25	; 0x03
     9fa:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char c = *data;
     9fc:	8a 81       	ldd	r24, Y+2	; 0x02
     9fe:	9b 81       	ldd	r25, Y+3	; 0x03
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	89 83       	std	Y+1, r24	; 0x01

	while (c)
     a06:	1a c0       	rjmp	.+52     	; 0xa3c <wan_usart_transmit_string+0x50>
	{
		while (!(UCSR0A & (1 << UDRE0)))
     a08:	00 00       	nop
     a0a:	80 ec       	ldi	r24, 0xC0	; 192
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	80 72       	andi	r24, 0x20	; 32
     a18:	99 27       	eor	r25, r25
     a1a:	00 97       	sbiw	r24, 0x00	; 0
     a1c:	b1 f3       	breq	.-20     	; 0xa0a <wan_usart_transmit_string+0x1e>
			;
		UDR0 = c;
     a1e:	86 ec       	ldi	r24, 0xC6	; 198
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
		c = *(++data);
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	9b 81       	ldd	r25, Y+3	; 0x03
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	9b 83       	std	Y+3, r25	; 0x03
     a30:	8a 83       	std	Y+2, r24	; 0x02
     a32:	8a 81       	ldd	r24, Y+2	; 0x02
     a34:	9b 81       	ldd	r25, Y+3	; 0x03
     a36:	fc 01       	movw	r30, r24
     a38:	80 81       	ld	r24, Z
     a3a:	89 83       	std	Y+1, r24	; 0x01

void wan_usart_transmit_string(char * data)
{
	unsigned char c = *data;

	while (c)
     a3c:	89 81       	ldd	r24, Y+1	; 0x01
     a3e:	88 23       	and	r24, r24
     a40:	19 f7       	brne	.-58     	; 0xa08 <wan_usart_transmit_string+0x1c>
		while (!(UCSR0A & (1 << UDRE0)))
			;
		UDR0 = c;
		c = *(++data);
	}
}
     a42:	0f 90       	pop	r0
     a44:	0f 90       	pop	r0
     a46:	0f 90       	pop	r0
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	08 95       	ret

00000a4e <__vector_20>:


ISR(WAN_ISR_VECTOR)
{
     a4e:	1f 92       	push	r1
     a50:	0f 92       	push	r0
     a52:	00 90 5f 00 	lds	r0, 0x005F
     a56:	0f 92       	push	r0
     a58:	11 24       	eor	r1, r1
     a5a:	00 90 5b 00 	lds	r0, 0x005B
     a5e:	0f 92       	push	r0
     a60:	2f 93       	push	r18
     a62:	3f 93       	push	r19
     a64:	4f 93       	push	r20
     a66:	5f 93       	push	r21
     a68:	6f 93       	push	r22
     a6a:	7f 93       	push	r23
     a6c:	8f 93       	push	r24
     a6e:	9f 93       	push	r25
     a70:	af 93       	push	r26
     a72:	bf 93       	push	r27
     a74:	ef 93       	push	r30
     a76:	ff 93       	push	r31
     a78:	cf 93       	push	r28
     a7a:	df 93       	push	r29
     a7c:	00 d0       	rcall	.+0      	; 0xa7e <__vector_20+0x30>
     a7e:	cd b7       	in	r28, 0x3d	; 61
     a80:	de b7       	in	r29, 0x3e	; 62
	char * data = UDR0;
     a82:	86 ec       	ldi	r24, 0xC6	; 198
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	fc 01       	movw	r30, r24
     a88:	80 81       	ld	r24, Z
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	9a 83       	std	Y+2, r25	; 0x02
     a90:	89 83       	std	Y+1, r24	; 0x01
	//if (btle_rx_cb != 0) btle_rx_cb(data);
	wan_usart_put_char(data);
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	0e 94 29 04 	call	0x852	; 0x852 <wan_usart_put_char>

//		//PORTD ^= _BV(PD7);

}
     a9a:	0f 90       	pop	r0
     a9c:	0f 90       	pop	r0
     a9e:	df 91       	pop	r29
     aa0:	cf 91       	pop	r28
     aa2:	ff 91       	pop	r31
     aa4:	ef 91       	pop	r30
     aa6:	bf 91       	pop	r27
     aa8:	af 91       	pop	r26
     aaa:	9f 91       	pop	r25
     aac:	8f 91       	pop	r24
     aae:	7f 91       	pop	r23
     ab0:	6f 91       	pop	r22
     ab2:	5f 91       	pop	r21
     ab4:	4f 91       	pop	r20
     ab6:	3f 91       	pop	r19
     ab8:	2f 91       	pop	r18
     aba:	0f 90       	pop	r0
     abc:	00 92 5b 00 	sts	0x005B, r0
     ac0:	0f 90       	pop	r0
     ac2:	00 92 5f 00 	sts	0x005F, r0
     ac6:	0f 90       	pop	r0
     ac8:	1f 90       	pop	r1
     aca:	18 95       	reti

00000acc <eeprom_read>:

#include "eeprom.h"


uint8_t eeprom_read(int address)
{
     acc:	cf 93       	push	r28
     ace:	df 93       	push	r29
     ad0:	00 d0       	rcall	.+0      	; 0xad2 <eeprom_read+0x6>
     ad2:	cd b7       	in	r28, 0x3d	; 61
     ad4:	de b7       	in	r29, 0x3e	; 62
     ad6:	9a 83       	std	Y+2, r25	; 0x02
     ad8:	89 83       	std	Y+1, r24	; 0x01
	return eeprom_read_byte((unsigned char *) address);
     ada:	89 81       	ldd	r24, Y+1	; 0x01
     adc:	9a 81       	ldd	r25, Y+2	; 0x02
     ade:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__eerd_byte_m1284p>
}
     ae2:	0f 90       	pop	r0
     ae4:	0f 90       	pop	r0
     ae6:	df 91       	pop	r29
     ae8:	cf 91       	pop	r28
     aea:	08 95       	ret

00000aec <eeprom_write>:

void eeprom_write(int address, uint8_t value)
{
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	00 d0       	rcall	.+0      	; 0xaf2 <eeprom_write+0x6>
     af2:	1f 92       	push	r1
     af4:	cd b7       	in	r28, 0x3d	; 61
     af6:	de b7       	in	r29, 0x3e	; 62
     af8:	9a 83       	std	Y+2, r25	; 0x02
     afa:	89 83       	std	Y+1, r24	; 0x01
     afc:	6b 83       	std	Y+3, r22	; 0x03
	eeprom_write_byte((unsigned char *) address, value);
     afe:	89 81       	ldd	r24, Y+1	; 0x01
     b00:	9a 81       	ldd	r25, Y+2	; 0x02
     b02:	6b 81       	ldd	r22, Y+3	; 0x03
     b04:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <__eewr_byte_m1284p>
}
     b08:	0f 90       	pop	r0
     b0a:	0f 90       	pop	r0
     b0c:	0f 90       	pop	r0
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	08 95       	ret

00000b14 <btle_init>:
#include "../usart/usart_wan.h"

uint8_t start_up_msg[5] = {0x00, 0x01, 0x06, 0x02, 0x01};

void btle_init()
{
     b14:	cf 93       	push	r28
     b16:	df 93       	push	r29
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	//btle_usart_init();
	// set portd bit 5 as output
	DDRD |= _BV(PD5);
     b1c:	8a e2       	ldi	r24, 0x2A	; 42
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	2a e2       	ldi	r18, 0x2A	; 42
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	f9 01       	movw	r30, r18
     b26:	20 81       	ld	r18, Z
     b28:	20 62       	ori	r18, 0x20	; 32
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
	// set portd bit 4 as input
	DDRD &= ~_BV(PD4);
     b2e:	8a e2       	ldi	r24, 0x2A	; 42
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	2a e2       	ldi	r18, 0x2A	; 42
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	2f 7e       	andi	r18, 0xEF	; 239
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18

	btle_set_cts('L');
     b40:	8c e4       	ldi	r24, 0x4C	; 76
     b42:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <btle_set_cts>
	btle_driver_init();
     b46:	0e 94 d4 05 	call	0xba8	; 0xba8 <btle_driver_init>
	btle_usart_transmit_bytes(start_up_msg, 5);
     b4a:	65 e0       	ldi	r22, 0x05	; 5
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	81 e1       	ldi	r24, 0x11	; 17
     b50:	91 e0       	ldi	r25, 0x01	; 1
     b52:	0e 94 4c 03 	call	0x698	; 0x698 <btle_usart_transmit_bytes>
	btle_set_cts('H');
     b56:	88 e4       	ldi	r24, 0x48	; 72
     b58:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <btle_set_cts>
	btle_usart_clear_buffer();
     b5c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <btle_usart_clear_buffer>


}
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <btle_get_cts>:


uint8_t btle_get_cts()
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	cd b7       	in	r28, 0x3d	; 61
     b6c:	de b7       	in	r29, 0x3e	; 62
	// return logic high or low
	return (PIND & _BV(PD5));
     b6e:	89 e2       	ldi	r24, 0x29	; 41
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	fc 01       	movw	r30, r24
     b74:	80 81       	ld	r24, Z
     b76:	80 72       	andi	r24, 0x20	; 32
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	08 95       	ret

00000b7e <btle_get_rts>:


uint8_t btle_get_rts()
{
     b7e:	cf 93       	push	r28
     b80:	df 93       	push	r29
     b82:	cd b7       	in	r28, 0x3d	; 61
     b84:	de b7       	in	r29, 0x3e	; 62
	// return logic high or low
	return (PIND & _BV(PD4));
     b86:	89 e2       	ldi	r24, 0x29	; 41
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	fc 01       	movw	r30, r24
     b8c:	80 81       	ld	r24, Z
     b8e:	80 71       	andi	r24, 0x10	; 16
}
     b90:	df 91       	pop	r29
     b92:	cf 91       	pop	r28
     b94:	08 95       	ret

00000b96 <btle_tick>:



void btle_tick()
{
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
	btle_driver_tick();
     b9e:	0e 94 04 06 	call	0xc08	; 0xc08 <btle_driver_tick>
}
     ba2:	df 91       	pop	r29
     ba4:	cf 91       	pop	r28
     ba6:	08 95       	ret

00000ba8 <btle_driver_init>:
void encode_string(btle_msg_t * value);
static void init_buffer();
static void init_lines();
static bool handle_data();

void btle_driver_init() {
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	init_buffer();
     bb0:	0e 94 73 07 	call	0xee6	; 0xee6 <init_buffer>
	init_lines();
     bb4:	0e 94 86 07 	call	0xf0c	; 0xf0c <init_lines>
	btle_usart_clear_buffer();
     bb8:	0e 94 e6 02 	call	0x5cc	; 0x5cc <btle_usart_clear_buffer>
}
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <btle_set_cts>:

void btle_set_cts(char mode)
{
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	1f 92       	push	r1
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
	//pd5 low
	if(mode == 'L')
     bce:	89 81       	ldd	r24, Y+1	; 0x01
     bd0:	8c 34       	cpi	r24, 0x4C	; 76
     bd2:	51 f4       	brne	.+20     	; 0xbe8 <btle_set_cts+0x26>
		PORTD &= ~_BV(PD5);
     bd4:	8b e2       	ldi	r24, 0x2B	; 43
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	2b e2       	ldi	r18, 0x2B	; 43
     bda:	30 e0       	ldi	r19, 0x00	; 0
     bdc:	f9 01       	movw	r30, r18
     bde:	20 81       	ld	r18, Z
     be0:	2f 7d       	andi	r18, 0xDF	; 223
     be2:	fc 01       	movw	r30, r24
     be4:	20 83       	st	Z, r18
     be6:	0c c0       	rjmp	.+24     	; 0xc00 <btle_set_cts+0x3e>

	//pd5 high
	else if(mode == 'H')
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	88 34       	cpi	r24, 0x48	; 72
     bec:	49 f4       	brne	.+18     	; 0xc00 <btle_set_cts+0x3e>
		PORTD |= _BV(PD5);
     bee:	8b e2       	ldi	r24, 0x2B	; 43
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	2b e2       	ldi	r18, 0x2B	; 43
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	f9 01       	movw	r30, r18
     bf8:	20 81       	ld	r18, Z
     bfa:	20 62       	ori	r18, 0x20	; 32
     bfc:	fc 01       	movw	r30, r24
     bfe:	20 83       	st	Z, r18
}
     c00:	0f 90       	pop	r0
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	08 95       	ret

00000c08 <btle_driver_tick>:

void btle_driver_tick() {
     c08:	cf 93       	push	r28
     c0a:	df 93       	push	r29
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62

	if(line_ready)
     c10:	80 91 27 01 	lds	r24, 0x0127
     c14:	90 91 28 01 	lds	r25, 0x0128
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	19 f0       	breq	.+6      	; 0xc22 <btle_driver_tick+0x1a>
		btle_set_cts('L');
     c1c:	8c e4       	ldi	r24, 0x4C	; 76
     c1e:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <btle_set_cts>



	if (btle_usart_data_available())
     c22:	0e 94 f5 02 	call	0x5ea	; 0x5ea <btle_usart_data_available>
     c26:	88 23       	and	r24, r24
     c28:	a9 f0       	breq	.+42     	; 0xc54 <btle_driver_tick+0x4c>
	{
		if (handle_data())
     c2a:	0e 94 95 07 	call	0xf2a	; 0xf2a <handle_data>
     c2e:	88 23       	and	r24, r24
     c30:	89 f0       	breq	.+34     	; 0xc54 <btle_driver_tick+0x4c>
		{
			line_ready = 0;
     c32:	10 92 28 01 	sts	0x0128, r1
     c36:	10 92 27 01 	sts	0x0127, r1
			btle_set_cts('H');
     c3a:	88 e4       	ldi	r24, 0x48	; 72
     c3c:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <btle_set_cts>

			if(validate_line())
     c40:	0e 94 2d 06 	call	0xc5a	; 0xc5a <validate_line>
     c44:	88 23       	and	r24, r24
     c46:	31 f0       	breq	.+12     	; 0xc54 <btle_driver_tick+0x4c>
			{
				wan_usart_transmit_string("TICK\r\n");
     c48:	83 e3       	ldi	r24, 0x33	; 51
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <wan_usart_transmit_string>
								encode_string(&msg);
							}

					}
*/
					init_lines();
     c50:	0e 94 86 07 	call	0xf0c	; 0xf0c <init_lines>
			}

		}
	}
}
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <validate_line>:

bool validate_line()
{
     c5a:	cf 93       	push	r28
     c5c:	df 93       	push	r29
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
	if(btle_lines[2] == 0x06 && btle_lines[0] == 0x80)
     c62:	80 91 df 06 	lds	r24, 0x06DF
     c66:	86 30       	cpi	r24, 0x06	; 6
     c68:	71 f4       	brne	.+28     	; 0xc86 <validate_line+0x2c>
     c6a:	80 91 dd 06 	lds	r24, 0x06DD
     c6e:	80 38       	cpi	r24, 0x80	; 128
     c70:	51 f4       	brne	.+20     	; 0xc86 <validate_line+0x2c>
	{
		//wan_usart_transmit_string("Passed tests!\r\n");
		line_ready = 1;
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	90 93 28 01 	sts	0x0128, r25
     c7a:	80 93 27 01 	sts	0x0127, r24
		btle_usart_clear_buffer();
     c7e:	0e 94 e6 02 	call	0x5cc	; 0x5cc <btle_usart_clear_buffer>
		return true;
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	0b c0       	rjmp	.+22     	; 0xc9c <validate_line+0x42>
	}



	line_ready = 1;
     c86:	81 e0       	ldi	r24, 0x01	; 1
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	90 93 28 01 	sts	0x0128, r25
     c8e:	80 93 27 01 	sts	0x0127, r24
	init_lines();
     c92:	0e 94 86 07 	call	0xf0c	; 0xf0c <init_lines>
	btle_usart_clear_buffer();
     c96:	0e 94 e6 02 	call	0x5cc	; 0x5cc <btle_usart_clear_buffer>

	return false;
     c9a:	80 e0       	ldi	r24, 0x00	; 0
}
     c9c:	df 91       	pop	r29
     c9e:	cf 91       	pop	r28
     ca0:	08 95       	ret

00000ca2 <encode_string>:

void encode_string(btle_msg_t * value) {
     ca2:	df 92       	push	r13
     ca4:	ef 92       	push	r14
     ca6:	ff 92       	push	r15
     ca8:	0f 93       	push	r16
     caa:	1f 93       	push	r17
     cac:	cf 93       	push	r28
     cae:	df 93       	push	r29
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	e4 97       	sbiw	r28, 0x34	; 52
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	f8 94       	cli
     cba:	de bf       	out	0x3e, r29	; 62
     cbc:	0f be       	out	0x3f, r0	; 63
     cbe:	cd bf       	out	0x3d, r28	; 61
     cc0:	9c ab       	std	Y+52, r25	; 0x34
     cc2:	8b ab       	std	Y+51, r24	; 0x33
	char tmp[50];

	memset(tmp, '\0', 50);
     cc4:	42 e3       	ldi	r20, 0x32	; 50
     cc6:	50 e0       	ldi	r21, 0x00	; 0
     cc8:	60 e0       	ldi	r22, 0x00	; 0
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	ce 01       	movw	r24, r28
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
	sprintf_P(tmp, PSTR(DEBUG_OUTPUT), value->rssi, value->batt, value->temp, value->mac);
     cd4:	eb a9       	ldd	r30, Y+51	; 0x33
     cd6:	fc a9       	ldd	r31, Y+52	; 0x34
     cd8:	21 81       	ldd	r18, Z+1	; 0x01
     cda:	32 81       	ldd	r19, Z+2	; 0x02
     cdc:	43 81       	ldd	r20, Z+3	; 0x03
     cde:	54 81       	ldd	r21, Z+4	; 0x04
     ce0:	65 81       	ldd	r22, Z+5	; 0x05
     ce2:	76 81       	ldd	r23, Z+6	; 0x06
     ce4:	87 81       	ldd	r24, Z+7	; 0x07
     ce6:	90 85       	ldd	r25, Z+8	; 0x08
     ce8:	eb a9       	ldd	r30, Y+51	; 0x33
     cea:	fc a9       	ldd	r31, Y+52	; 0x34
     cec:	e3 84       	ldd	r14, Z+11	; 0x0b
     cee:	f4 84       	ldd	r15, Z+12	; 0x0c
     cf0:	eb a9       	ldd	r30, Y+51	; 0x33
     cf2:	fc a9       	ldd	r31, Y+52	; 0x34
     cf4:	01 85       	ldd	r16, Z+9	; 0x09
     cf6:	12 85       	ldd	r17, Z+10	; 0x0a
     cf8:	eb a9       	ldd	r30, Y+51	; 0x33
     cfa:	fc a9       	ldd	r31, Y+52	; 0x34
     cfc:	e0 81       	ld	r30, Z
     cfe:	ae 2f       	mov	r26, r30
     d00:	b0 e0       	ldi	r27, 0x00	; 0
     d02:	ed e9       	ldi	r30, 0x9D	; 157
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	d9 2e       	mov	r13, r25
     d08:	df 92       	push	r13
     d0a:	d8 2e       	mov	r13, r24
     d0c:	df 92       	push	r13
     d0e:	d7 2e       	mov	r13, r23
     d10:	df 92       	push	r13
     d12:	d6 2e       	mov	r13, r22
     d14:	df 92       	push	r13
     d16:	d5 2e       	mov	r13, r21
     d18:	df 92       	push	r13
     d1a:	d4 2e       	mov	r13, r20
     d1c:	df 92       	push	r13
     d1e:	d3 2e       	mov	r13, r19
     d20:	df 92       	push	r13
     d22:	82 2f       	mov	r24, r18
     d24:	8f 93       	push	r24
     d26:	8f 2d       	mov	r24, r15
     d28:	8f 93       	push	r24
     d2a:	8e 2d       	mov	r24, r14
     d2c:	8f 93       	push	r24
     d2e:	81 2f       	mov	r24, r17
     d30:	8f 93       	push	r24
     d32:	80 2f       	mov	r24, r16
     d34:	8f 93       	push	r24
     d36:	8b 2f       	mov	r24, r27
     d38:	8f 93       	push	r24
     d3a:	8a 2f       	mov	r24, r26
     d3c:	8f 93       	push	r24
     d3e:	8f 2f       	mov	r24, r31
     d40:	8f 93       	push	r24
     d42:	8e 2f       	mov	r24, r30
     d44:	8f 93       	push	r24
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	89 2f       	mov	r24, r25
     d4c:	8f 93       	push	r24
     d4e:	ce 01       	movw	r24, r28
     d50:	01 96       	adiw	r24, 0x01	; 1
     d52:	8f 93       	push	r24
     d54:	0e 94 a9 08 	call	0x1152	; 0x1152 <sprintf_P>
     d58:	8d b7       	in	r24, 0x3d	; 61
     d5a:	9e b7       	in	r25, 0x3e	; 62
     d5c:	42 96       	adiw	r24, 0x12	; 18
     d5e:	0f b6       	in	r0, 0x3f	; 63
     d60:	f8 94       	cli
     d62:	de bf       	out	0x3e, r29	; 62
     d64:	0f be       	out	0x3f, r0	; 63
     d66:	cd bf       	out	0x3d, r28	; 61
	wan_usart_transmit_string(tmp);
     d68:	ce 01       	movw	r24, r28
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <wan_usart_transmit_string>
}
     d70:	e4 96       	adiw	r28, 0x34	; 52
     d72:	0f b6       	in	r0, 0x3f	; 63
     d74:	f8 94       	cli
     d76:	de bf       	out	0x3e, r29	; 62
     d78:	0f be       	out	0x3f, r0	; 63
     d7a:	cd bf       	out	0x3d, r28	; 61
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	1f 91       	pop	r17
     d82:	0f 91       	pop	r16
     d84:	ff 90       	pop	r15
     d86:	ef 90       	pop	r14
     d88:	df 90       	pop	r13
     d8a:	08 95       	ret

00000d8c <print_bytes>:

void print_bytes()
{
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
     d9c:	2b 97       	sbiw	r28, 0x0b	; 11
     d9e:	0f b6       	in	r0, 0x3f	; 63
     da0:	f8 94       	cli
     da2:	de bf       	out	0x3e, r29	; 62
     da4:	0f be       	out	0x3f, r0	; 63
     da6:	cd bf       	out	0x3d, r28	; 61

	}

	wan_usart_transmit_string(temp);
	wan_usart_transmit_string("\r\n");
}
     da8:	0d b7       	in	r16, 0x3d	; 61
     daa:	1e b7       	in	r17, 0x3e	; 62
     dac:	8d b7       	in	r24, 0x3d	; 61
     dae:	9e b7       	in	r25, 0x3e	; 62
     db0:	7c 01       	movw	r14, r24
}

void print_bytes()
{
	uint8_t x;
	int temp_size = 14 + msg_length;
     db2:	80 91 29 01 	lds	r24, 0x0129
     db6:	90 91 2a 01 	lds	r25, 0x012A
     dba:	0e 96       	adiw	r24, 0x0e	; 14
     dbc:	9e 83       	std	Y+6, r25	; 0x06
     dbe:	8d 83       	std	Y+5, r24	; 0x05
	char temp[3*(temp_size)];
     dc0:	2d 81       	ldd	r18, Y+5	; 0x05
     dc2:	3e 81       	ldd	r19, Y+6	; 0x06
     dc4:	c9 01       	movw	r24, r18
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	82 0f       	add	r24, r18
     dcc:	93 1f       	adc	r25, r19
     dce:	9c 01       	movw	r18, r24
     dd0:	21 50       	subi	r18, 0x01	; 1
     dd2:	31 09       	sbc	r19, r1
     dd4:	38 87       	std	Y+8, r19	; 0x08
     dd6:	2f 83       	std	Y+7, r18	; 0x07
     dd8:	2d b7       	in	r18, 0x3d	; 61
     dda:	3e b7       	in	r19, 0x3e	; 62
     ddc:	28 1b       	sub	r18, r24
     dde:	39 0b       	sbc	r19, r25
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	3e bf       	out	0x3e, r19	; 62
     de6:	0f be       	out	0x3f, r0	; 63
     de8:	2d bf       	out	0x3d, r18	; 61
     dea:	8d b7       	in	r24, 0x3d	; 61
     dec:	9e b7       	in	r25, 0x3e	; 62
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	9a 87       	std	Y+10, r25	; 0x0a
     df2:	89 87       	std	Y+9, r24	; 0x09
	int temp_index = 0;
     df4:	1a 82       	std	Y+2, r1	; 0x02
     df6:	19 82       	std	Y+1, r1	; 0x01

	for (int i=0;i<temp_size;i++)
     df8:	1c 82       	std	Y+4, r1	; 0x04
     dfa:	1b 82       	std	Y+3, r1	; 0x03
     dfc:	4d c0       	rjmp	.+154    	; 0xe98 <print_bytes+0x10c>
	{
		x = (uint8_t)HEX_DIGITS[(btle_lines[i] >> 4)];
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	83 52       	subi	r24, 0x23	; 35
     e04:	99 4f       	sbci	r25, 0xF9	; 249
     e06:	fc 01       	movw	r30, r24
     e08:	80 81       	ld	r24, Z
     e0a:	82 95       	swap	r24
     e0c:	8f 70       	andi	r24, 0x0F	; 15
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	8a 5e       	subi	r24, 0xEA	; 234
     e14:	9e 4f       	sbci	r25, 0xFE	; 254
     e16:	fc 01       	movw	r30, r24
     e18:	80 81       	ld	r24, Z
     e1a:	8b 87       	std	Y+11, r24	; 0x0b
		temp[temp_index] = x;
     e1c:	29 85       	ldd	r18, Y+9	; 0x09
     e1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	82 0f       	add	r24, r18
     e26:	93 1f       	adc	r25, r19
     e28:	2b 85       	ldd	r18, Y+11	; 0x0b
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
		temp_index++;
     e2e:	89 81       	ldd	r24, Y+1	; 0x01
     e30:	9a 81       	ldd	r25, Y+2	; 0x02
     e32:	01 96       	adiw	r24, 0x01	; 1
     e34:	9a 83       	std	Y+2, r25	; 0x02
     e36:	89 83       	std	Y+1, r24	; 0x01
		x = (uint8_t)HEX_DIGITS[(btle_lines[i] & 0x0f)];
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	83 52       	subi	r24, 0x23	; 35
     e3e:	99 4f       	sbci	r25, 0xF9	; 249
     e40:	fc 01       	movw	r30, r24
     e42:	80 81       	ld	r24, Z
     e44:	88 2f       	mov	r24, r24
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	8f 70       	andi	r24, 0x0F	; 15
     e4a:	99 27       	eor	r25, r25
     e4c:	8a 5e       	subi	r24, 0xEA	; 234
     e4e:	9e 4f       	sbci	r25, 0xFE	; 254
     e50:	fc 01       	movw	r30, r24
     e52:	80 81       	ld	r24, Z
     e54:	8b 87       	std	Y+11, r24	; 0x0b
		temp[temp_index] = x;
     e56:	29 85       	ldd	r18, Y+9	; 0x09
     e58:	3a 85       	ldd	r19, Y+10	; 0x0a
     e5a:	89 81       	ldd	r24, Y+1	; 0x01
     e5c:	9a 81       	ldd	r25, Y+2	; 0x02
     e5e:	82 0f       	add	r24, r18
     e60:	93 1f       	adc	r25, r19
     e62:	2b 85       	ldd	r18, Y+11	; 0x0b
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
		temp_index++;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
     e6c:	01 96       	adiw	r24, 0x01	; 1
     e6e:	9a 83       	std	Y+2, r25	; 0x02
     e70:	89 83       	std	Y+1, r24	; 0x01
		temp[temp_index] = ' ';
     e72:	29 85       	ldd	r18, Y+9	; 0x09
     e74:	3a 85       	ldd	r19, Y+10	; 0x0a
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	9a 81       	ldd	r25, Y+2	; 0x02
     e7a:	82 0f       	add	r24, r18
     e7c:	93 1f       	adc	r25, r19
     e7e:	20 e2       	ldi	r18, 0x20	; 32
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
		temp_index++;
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	9a 83       	std	Y+2, r25	; 0x02
     e8c:	89 83       	std	Y+1, r24	; 0x01
	uint8_t x;
	int temp_size = 14 + msg_length;
	char temp[3*(temp_size)];
	int temp_index = 0;

	for (int i=0;i<temp_size;i++)
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	01 96       	adiw	r24, 0x01	; 1
     e94:	9c 83       	std	Y+4, r25	; 0x04
     e96:	8b 83       	std	Y+3, r24	; 0x03
     e98:	2b 81       	ldd	r18, Y+3	; 0x03
     e9a:	3c 81       	ldd	r19, Y+4	; 0x04
     e9c:	8d 81       	ldd	r24, Y+5	; 0x05
     e9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ea0:	28 17       	cp	r18, r24
     ea2:	39 07       	cpc	r19, r25
     ea4:	0c f4       	brge	.+2      	; 0xea8 <print_bytes+0x11c>
     ea6:	ab cf       	rjmp	.-170    	; 0xdfe <print_bytes+0x72>
		temp[temp_index] = ' ';
		temp_index++;

	}

	wan_usart_transmit_string(temp);
     ea8:	89 85       	ldd	r24, Y+9	; 0x09
     eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
     eac:	0e 94 f6 04 	call	0x9ec	; 0x9ec <wan_usart_transmit_string>
	wan_usart_transmit_string("\r\n");
     eb0:	8a e3       	ldi	r24, 0x3A	; 58
     eb2:	91 e0       	ldi	r25, 0x01	; 1
     eb4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <wan_usart_transmit_string>
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	f8 94       	cli
     ebc:	fe be       	out	0x3e, r15	; 62
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	ed be       	out	0x3d, r14	; 61
}
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	f8 94       	cli
     ec6:	1e bf       	out	0x3e, r17	; 62
     ec8:	0f be       	out	0x3f, r0	; 63
     eca:	0d bf       	out	0x3d, r16	; 61
     ecc:	2b 96       	adiw	r28, 0x0b	; 11
     ece:	0f b6       	in	r0, 0x3f	; 63
     ed0:	f8 94       	cli
     ed2:	de bf       	out	0x3e, r29	; 62
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	cd bf       	out	0x3d, r28	; 61
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	08 95       	ret

00000ee6 <init_buffer>:

static void init_buffer() {
     ee6:	cf 93       	push	r28
     ee8:	df 93       	push	r29
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
	btle_line_index = 0;
     eee:	10 92 57 05 	sts	0x0557, r1
     ef2:	10 92 56 05 	sts	0x0556, r1
	memset(btle_line_buffer, '\0', sizeof(btle_line_buffer));
     ef6:	41 e8       	ldi	r20, 0x81	; 129
     ef8:	50 e0       	ldi	r21, 0x00	; 0
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	70 e0       	ldi	r23, 0x00	; 0
     efe:	8c e6       	ldi	r24, 0x6C	; 108
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     f06:	df 91       	pop	r29
     f08:	cf 91       	pop	r28
     f0a:	08 95       	ret

00000f0c <init_lines>:

static void init_lines() {
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	cd b7       	in	r28, 0x3d	; 61
     f12:	de b7       	in	r29, 0x3e	; 62
	memset(btle_lines, '\0', sizeof(btle_lines));
     f14:	41 e8       	ldi	r20, 0x81	; 129
     f16:	50 e0       	ldi	r21, 0x00	; 0
     f18:	60 e0       	ldi	r22, 0x00	; 0
     f1a:	70 e0       	ldi	r23, 0x00	; 0
     f1c:	8d ed       	ldi	r24, 0xDD	; 221
     f1e:	96 e0       	ldi	r25, 0x06	; 6
     f20:	0e 94 52 08 	call	0x10a4	; 0x10a4 <memset>
}
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	08 95       	ret

00000f2a <handle_data>:

// check to see if we have a new line
bool handle_data()
{
     f2a:	cf 93       	push	r28
     f2c:	df 93       	push	r29
     f2e:	1f 92       	push	r1
     f30:	cd b7       	in	r28, 0x3d	; 61
     f32:	de b7       	in	r29, 0x3e	; 62

	uint8_t c = btle_usart_data_read();
     f34:	0e 94 08 03 	call	0x610	; 0x610 <btle_usart_data_read>
     f38:	89 83       	std	Y+1, r24	; 0x01


	// prevent buffer overrun
	if (btle_line_index >= 50)
     f3a:	80 91 56 05 	lds	r24, 0x0556
     f3e:	90 91 57 05 	lds	r25, 0x0557
     f42:	82 33       	cpi	r24, 0x32	; 50
     f44:	91 05       	cpc	r25, r1
     f46:	84 f0       	brlt	.+32     	; 0xf68 <handle_data+0x3e>
	{
		init_buffer();
     f48:	0e 94 73 07 	call	0xee6	; 0xee6 <init_buffer>
		btle_usart_clear_buffer();
     f4c:	0e 94 e6 02 	call	0x5cc	; 0x5cc <btle_usart_clear_buffer>
		msg_index = 0;
     f50:	10 92 55 05 	sts	0x0555, r1
     f54:	10 92 54 05 	sts	0x0554, r1
		msg_index = 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	90 93 55 05 	sts	0x0555, r25
     f60:	80 93 54 05 	sts	0x0554, r24
		return false;
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	55 c0       	rjmp	.+170    	; 0x1012 <handle_data+0xe8>
	}

	// store character in btle_line_buffer
	btle_line_buffer[btle_line_index] = c;
     f68:	80 91 56 05 	lds	r24, 0x0556
     f6c:	90 91 57 05 	lds	r25, 0x0557
     f70:	84 59       	subi	r24, 0x94	; 148
     f72:	98 4f       	sbci	r25, 0xF8	; 248
     f74:	29 81       	ldd	r18, Y+1	; 0x01
     f76:	fc 01       	movw	r30, r24
     f78:	20 83       	st	Z, r18

	//check for length
	if(btle_line_index == 14)
     f7a:	80 91 56 05 	lds	r24, 0x0556
     f7e:	90 91 57 05 	lds	r25, 0x0557
     f82:	8e 30       	cpi	r24, 0x0E	; 14
     f84:	91 05       	cpc	r25, r1
     f86:	39 f4       	brne	.+14     	; 0xf96 <handle_data+0x6c>
		msg_length = c;
     f88:	89 81       	ldd	r24, Y+1	; 0x01
     f8a:	88 2f       	mov	r24, r24
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	90 93 2a 01 	sts	0x012A, r25
     f92:	80 93 29 01 	sts	0x0129, r24

	//check for payload
	if(btle_line_index > 14)
     f96:	80 91 56 05 	lds	r24, 0x0556
     f9a:	90 91 57 05 	lds	r25, 0x0557
     f9e:	8f 30       	cpi	r24, 0x0F	; 15
     fa0:	91 05       	cpc	r25, r1
     fa2:	4c f0       	brlt	.+18     	; 0xfb6 <handle_data+0x8c>
		msg_index++;
     fa4:	80 91 54 05 	lds	r24, 0x0554
     fa8:	90 91 55 05 	lds	r25, 0x0555
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	90 93 55 05 	sts	0x0555, r25
     fb2:	80 93 54 05 	sts	0x0554, r24

	//check for end of payload
	if(msg_index == msg_length)
     fb6:	20 91 54 05 	lds	r18, 0x0554
     fba:	30 91 55 05 	lds	r19, 0x0555
     fbe:	80 91 29 01 	lds	r24, 0x0129
     fc2:	90 91 2a 01 	lds	r25, 0x012A
     fc6:	28 17       	cp	r18, r24
     fc8:	39 07       	cpc	r19, r25
     fca:	c9 f4       	brne	.+50     	; 0xffe <handle_data+0xd4>
	{
		memcpy(btle_lines, btle_line_buffer, btle_line_index);
     fcc:	80 91 56 05 	lds	r24, 0x0556
     fd0:	90 91 57 05 	lds	r25, 0x0557
     fd4:	ac 01       	movw	r20, r24
     fd6:	6c e6       	ldi	r22, 0x6C	; 108
     fd8:	77 e0       	ldi	r23, 0x07	; 7
     fda:	8d ed       	ldi	r24, 0xDD	; 221
     fdc:	96 e0       	ldi	r25, 0x06	; 6
     fde:	0e 94 49 08 	call	0x1092	; 0x1092 <memcpy>
		//print_bytes();
		init_buffer();
     fe2:	0e 94 73 07 	call	0xee6	; 0xee6 <init_buffer>
		msg_index = 0;
     fe6:	10 92 55 05 	sts	0x0555, r1
     fea:	10 92 54 05 	sts	0x0554, r1
		msg_length = 1;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 2a 01 	sts	0x012A, r25
     ff6:	80 93 29 01 	sts	0x0129, r24
		return true;
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	0a c0       	rjmp	.+20     	; 0x1012 <handle_data+0xe8>
	}


	btle_line_index++;
     ffe:	80 91 56 05 	lds	r24, 0x0556
    1002:	90 91 57 05 	lds	r25, 0x0557
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	90 93 57 05 	sts	0x0557, r25
    100c:	80 93 56 05 	sts	0x0556, r24

	return false;
    1010:	80 e0       	ldi	r24, 0x00	; 0
}
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	08 95       	ret

0000101a <terminal_in_cb>:
#include "wan/wan.h"

volatile char term_in = 0;

void terminal_in_cb(uint8_t c)
{
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	1f 92       	push	r1
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62
    1024:	89 83       	std	Y+1, r24	; 0x01
	term_in = c;
    1026:	89 81       	ldd	r24, Y+1	; 0x01
    1028:	80 93 58 05 	sts	0x0558, r24

}
    102c:	0f 90       	pop	r0
    102e:	df 91       	pop	r29
    1030:	cf 91       	pop	r28
    1032:	08 95       	ret

00001034 <main>:

void main()
{
    1034:	cf 93       	push	r28
    1036:	df 93       	push	r29
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
	// Blinky test!
	DDRD |= _BV(PD6); // data direction bit
    103c:	8a e2       	ldi	r24, 0x2A	; 42
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	2a e2       	ldi	r18, 0x2A	; 42
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	f9 01       	movw	r30, r18
    1046:	20 81       	ld	r18, Z
    1048:	20 64       	ori	r18, 0x40	; 64
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
	DDRD |= _BV(PD7);
    104e:	8a e2       	ldi	r24, 0x2A	; 42
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	2a e2       	ldi	r18, 0x2A	; 42
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	f9 01       	movw	r30, r18
    1058:	20 81       	ld	r18, Z
    105a:	20 68       	ori	r18, 0x80	; 128
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18

	DDRB &= _BV(PB0); // WAN_INT_01
    1060:	84 e2       	ldi	r24, 0x24	; 36
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	24 e2       	ldi	r18, 0x24	; 36
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	f9 01       	movw	r30, r18
    106a:	20 81       	ld	r18, Z
    106c:	21 70       	andi	r18, 0x01	; 1
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18

	//debug_init(terminal_in_cb);
	btle_usart_init_cb(terminal_in_cb);
    1072:	8d e0       	ldi	r24, 0x0D	; 13
    1074:	98 e0       	ldi	r25, 0x08	; 8
    1076:	0e 94 85 02 	call	0x50a	; 0x50a <btle_usart_init_cb>


	// btle is on usart1
	btle_init();
    107a:	0e 94 8a 05 	call	0xb14	; 0xb14 <btle_init>

	// wan is on usart0
	wan_init();
    107e:	0e 94 81 00 	call	0x102	; 0x102 <wan_init>


	sei();
    1082:	78 94       	sei

	while(true)
	{

		btle_tick();
    1084:	0e 94 cb 05 	call	0xb96	; 0xb96 <btle_tick>
		wan_tick();
    1088:	0e 94 a8 00 	call	0x150	; 0x150 <wan_tick>

		term_in = 0;
    108c:	10 92 58 05 	sts	0x0558, r1

	}
    1090:	f9 cf       	rjmp	.-14     	; 0x1084 <main+0x50>

00001092 <memcpy>:
    1092:	fb 01       	movw	r30, r22
    1094:	dc 01       	movw	r26, r24
    1096:	02 c0       	rjmp	.+4      	; 0x109c <memcpy+0xa>
    1098:	01 90       	ld	r0, Z+
    109a:	0d 92       	st	X+, r0
    109c:	41 50       	subi	r20, 0x01	; 1
    109e:	50 40       	sbci	r21, 0x00	; 0
    10a0:	d8 f7       	brcc	.-10     	; 0x1098 <memcpy+0x6>
    10a2:	08 95       	ret

000010a4 <memset>:
    10a4:	dc 01       	movw	r26, r24
    10a6:	01 c0       	rjmp	.+2      	; 0x10aa <memset+0x6>
    10a8:	6d 93       	st	X+, r22
    10aa:	41 50       	subi	r20, 0x01	; 1
    10ac:	50 40       	sbci	r21, 0x00	; 0
    10ae:	e0 f7       	brcc	.-8      	; 0x10a8 <memset+0x4>
    10b0:	08 95       	ret

000010b2 <strcpy>:
    10b2:	fb 01       	movw	r30, r22
    10b4:	dc 01       	movw	r26, r24
    10b6:	01 90       	ld	r0, Z+
    10b8:	0d 92       	st	X+, r0
    10ba:	00 20       	and	r0, r0
    10bc:	e1 f7       	brne	.-8      	; 0x10b6 <strcpy+0x4>
    10be:	08 95       	ret

000010c0 <strstr>:
    10c0:	fb 01       	movw	r30, r22
    10c2:	51 91       	ld	r21, Z+
    10c4:	55 23       	and	r21, r21
    10c6:	a9 f0       	breq	.+42     	; 0x10f2 <strstr+0x32>
    10c8:	bf 01       	movw	r22, r30
    10ca:	dc 01       	movw	r26, r24
    10cc:	4d 91       	ld	r20, X+
    10ce:	45 17       	cp	r20, r21
    10d0:	41 11       	cpse	r20, r1
    10d2:	e1 f7       	brne	.-8      	; 0x10cc <strstr+0xc>
    10d4:	59 f4       	brne	.+22     	; 0x10ec <strstr+0x2c>
    10d6:	cd 01       	movw	r24, r26
    10d8:	01 90       	ld	r0, Z+
    10da:	00 20       	and	r0, r0
    10dc:	49 f0       	breq	.+18     	; 0x10f0 <strstr+0x30>
    10de:	4d 91       	ld	r20, X+
    10e0:	40 15       	cp	r20, r0
    10e2:	41 11       	cpse	r20, r1
    10e4:	c9 f3       	breq	.-14     	; 0x10d8 <strstr+0x18>
    10e6:	fb 01       	movw	r30, r22
    10e8:	41 11       	cpse	r20, r1
    10ea:	ef cf       	rjmp	.-34     	; 0x10ca <strstr+0xa>
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	08 95       	ret

000010f4 <sprintf>:
    10f4:	0f 93       	push	r16
    10f6:	1f 93       	push	r17
    10f8:	cf 93       	push	r28
    10fa:	df 93       	push	r29
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
    1100:	2e 97       	sbiw	r28, 0x0e	; 14
    1102:	0f b6       	in	r0, 0x3f	; 63
    1104:	f8 94       	cli
    1106:	de bf       	out	0x3e, r29	; 62
    1108:	0f be       	out	0x3f, r0	; 63
    110a:	cd bf       	out	0x3d, r28	; 61
    110c:	0d 89       	ldd	r16, Y+21	; 0x15
    110e:	1e 89       	ldd	r17, Y+22	; 0x16
    1110:	86 e0       	ldi	r24, 0x06	; 6
    1112:	8c 83       	std	Y+4, r24	; 0x04
    1114:	1a 83       	std	Y+2, r17	; 0x02
    1116:	09 83       	std	Y+1, r16	; 0x01
    1118:	8f ef       	ldi	r24, 0xFF	; 255
    111a:	9f e7       	ldi	r25, 0x7F	; 127
    111c:	9e 83       	std	Y+6, r25	; 0x06
    111e:	8d 83       	std	Y+5, r24	; 0x05
    1120:	ae 01       	movw	r20, r28
    1122:	47 5e       	subi	r20, 0xE7	; 231
    1124:	5f 4f       	sbci	r21, 0xFF	; 255
    1126:	6f 89       	ldd	r22, Y+23	; 0x17
    1128:	78 8d       	ldd	r23, Y+24	; 0x18
    112a:	ce 01       	movw	r24, r28
    112c:	01 96       	adiw	r24, 0x01	; 1
    112e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <vfprintf>
    1132:	ef 81       	ldd	r30, Y+7	; 0x07
    1134:	f8 85       	ldd	r31, Y+8	; 0x08
    1136:	e0 0f       	add	r30, r16
    1138:	f1 1f       	adc	r31, r17
    113a:	10 82       	st	Z, r1
    113c:	2e 96       	adiw	r28, 0x0e	; 14
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	f8 94       	cli
    1142:	de bf       	out	0x3e, r29	; 62
    1144:	0f be       	out	0x3f, r0	; 63
    1146:	cd bf       	out	0x3d, r28	; 61
    1148:	df 91       	pop	r29
    114a:	cf 91       	pop	r28
    114c:	1f 91       	pop	r17
    114e:	0f 91       	pop	r16
    1150:	08 95       	ret

00001152 <sprintf_P>:
    1152:	0f 93       	push	r16
    1154:	1f 93       	push	r17
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	2e 97       	sbiw	r28, 0x0e	; 14
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	0d 89       	ldd	r16, Y+21	; 0x15
    116c:	1e 89       	ldd	r17, Y+22	; 0x16
    116e:	8e e0       	ldi	r24, 0x0E	; 14
    1170:	8c 83       	std	Y+4, r24	; 0x04
    1172:	1a 83       	std	Y+2, r17	; 0x02
    1174:	09 83       	std	Y+1, r16	; 0x01
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	9f e7       	ldi	r25, 0x7F	; 127
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	ae 01       	movw	r20, r28
    1180:	47 5e       	subi	r20, 0xE7	; 231
    1182:	5f 4f       	sbci	r21, 0xFF	; 255
    1184:	6f 89       	ldd	r22, Y+23	; 0x17
    1186:	78 8d       	ldd	r23, Y+24	; 0x18
    1188:	ce 01       	movw	r24, r28
    118a:	01 96       	adiw	r24, 0x01	; 1
    118c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <vfprintf>
    1190:	ef 81       	ldd	r30, Y+7	; 0x07
    1192:	f8 85       	ldd	r31, Y+8	; 0x08
    1194:	e0 0f       	add	r30, r16
    1196:	f1 1f       	adc	r31, r17
    1198:	10 82       	st	Z, r1
    119a:	2e 96       	adiw	r28, 0x0e	; 14
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	df 91       	pop	r29
    11a8:	cf 91       	pop	r28
    11aa:	1f 91       	pop	r17
    11ac:	0f 91       	pop	r16
    11ae:	08 95       	ret

000011b0 <vfprintf>:
    11b0:	2f 92       	push	r2
    11b2:	3f 92       	push	r3
    11b4:	4f 92       	push	r4
    11b6:	5f 92       	push	r5
    11b8:	6f 92       	push	r6
    11ba:	7f 92       	push	r7
    11bc:	8f 92       	push	r8
    11be:	9f 92       	push	r9
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
    11d8:	2c 97       	sbiw	r28, 0x0c	; 12
    11da:	0f b6       	in	r0, 0x3f	; 63
    11dc:	f8 94       	cli
    11de:	de bf       	out	0x3e, r29	; 62
    11e0:	0f be       	out	0x3f, r0	; 63
    11e2:	cd bf       	out	0x3d, r28	; 61
    11e4:	7c 01       	movw	r14, r24
    11e6:	6b 01       	movw	r12, r22
    11e8:	8a 01       	movw	r16, r20
    11ea:	fc 01       	movw	r30, r24
    11ec:	17 82       	std	Z+7, r1	; 0x07
    11ee:	16 82       	std	Z+6, r1	; 0x06
    11f0:	83 81       	ldd	r24, Z+3	; 0x03
    11f2:	81 ff       	sbrs	r24, 1
    11f4:	bd c1       	rjmp	.+890    	; 0x1570 <vfprintf+0x3c0>
    11f6:	ce 01       	movw	r24, r28
    11f8:	01 96       	adiw	r24, 0x01	; 1
    11fa:	4c 01       	movw	r8, r24
    11fc:	f7 01       	movw	r30, r14
    11fe:	93 81       	ldd	r25, Z+3	; 0x03
    1200:	f6 01       	movw	r30, r12
    1202:	93 fd       	sbrc	r25, 3
    1204:	85 91       	lpm	r24, Z+
    1206:	93 ff       	sbrs	r25, 3
    1208:	81 91       	ld	r24, Z+
    120a:	6f 01       	movw	r12, r30
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <vfprintf+0x62>
    1210:	ab c1       	rjmp	.+854    	; 0x1568 <vfprintf+0x3b8>
    1212:	85 32       	cpi	r24, 0x25	; 37
    1214:	39 f4       	brne	.+14     	; 0x1224 <vfprintf+0x74>
    1216:	93 fd       	sbrc	r25, 3
    1218:	85 91       	lpm	r24, Z+
    121a:	93 ff       	sbrs	r25, 3
    121c:	81 91       	ld	r24, Z+
    121e:	6f 01       	movw	r12, r30
    1220:	85 32       	cpi	r24, 0x25	; 37
    1222:	29 f4       	brne	.+10     	; 0x122e <vfprintf+0x7e>
    1224:	b7 01       	movw	r22, r14
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    122c:	e7 cf       	rjmp	.-50     	; 0x11fc <vfprintf+0x4c>
    122e:	51 2c       	mov	r5, r1
    1230:	31 2c       	mov	r3, r1
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	20 32       	cpi	r18, 0x20	; 32
    1236:	a0 f4       	brcc	.+40     	; 0x1260 <vfprintf+0xb0>
    1238:	8b 32       	cpi	r24, 0x2B	; 43
    123a:	69 f0       	breq	.+26     	; 0x1256 <vfprintf+0xa6>
    123c:	30 f4       	brcc	.+12     	; 0x124a <vfprintf+0x9a>
    123e:	80 32       	cpi	r24, 0x20	; 32
    1240:	59 f0       	breq	.+22     	; 0x1258 <vfprintf+0xa8>
    1242:	83 32       	cpi	r24, 0x23	; 35
    1244:	69 f4       	brne	.+26     	; 0x1260 <vfprintf+0xb0>
    1246:	20 61       	ori	r18, 0x10	; 16
    1248:	2c c0       	rjmp	.+88     	; 0x12a2 <vfprintf+0xf2>
    124a:	8d 32       	cpi	r24, 0x2D	; 45
    124c:	39 f0       	breq	.+14     	; 0x125c <vfprintf+0xac>
    124e:	80 33       	cpi	r24, 0x30	; 48
    1250:	39 f4       	brne	.+14     	; 0x1260 <vfprintf+0xb0>
    1252:	21 60       	ori	r18, 0x01	; 1
    1254:	26 c0       	rjmp	.+76     	; 0x12a2 <vfprintf+0xf2>
    1256:	22 60       	ori	r18, 0x02	; 2
    1258:	24 60       	ori	r18, 0x04	; 4
    125a:	23 c0       	rjmp	.+70     	; 0x12a2 <vfprintf+0xf2>
    125c:	28 60       	ori	r18, 0x08	; 8
    125e:	21 c0       	rjmp	.+66     	; 0x12a2 <vfprintf+0xf2>
    1260:	27 fd       	sbrc	r18, 7
    1262:	27 c0       	rjmp	.+78     	; 0x12b2 <vfprintf+0x102>
    1264:	30 ed       	ldi	r19, 0xD0	; 208
    1266:	38 0f       	add	r19, r24
    1268:	3a 30       	cpi	r19, 0x0A	; 10
    126a:	78 f4       	brcc	.+30     	; 0x128a <vfprintf+0xda>
    126c:	26 ff       	sbrs	r18, 6
    126e:	06 c0       	rjmp	.+12     	; 0x127c <vfprintf+0xcc>
    1270:	fa e0       	ldi	r31, 0x0A	; 10
    1272:	5f 9e       	mul	r5, r31
    1274:	30 0d       	add	r19, r0
    1276:	11 24       	eor	r1, r1
    1278:	53 2e       	mov	r5, r19
    127a:	13 c0       	rjmp	.+38     	; 0x12a2 <vfprintf+0xf2>
    127c:	8a e0       	ldi	r24, 0x0A	; 10
    127e:	38 9e       	mul	r3, r24
    1280:	30 0d       	add	r19, r0
    1282:	11 24       	eor	r1, r1
    1284:	33 2e       	mov	r3, r19
    1286:	20 62       	ori	r18, 0x20	; 32
    1288:	0c c0       	rjmp	.+24     	; 0x12a2 <vfprintf+0xf2>
    128a:	8e 32       	cpi	r24, 0x2E	; 46
    128c:	21 f4       	brne	.+8      	; 0x1296 <vfprintf+0xe6>
    128e:	26 fd       	sbrc	r18, 6
    1290:	6b c1       	rjmp	.+726    	; 0x1568 <vfprintf+0x3b8>
    1292:	20 64       	ori	r18, 0x40	; 64
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0xf2>
    1296:	8c 36       	cpi	r24, 0x6C	; 108
    1298:	11 f4       	brne	.+4      	; 0x129e <vfprintf+0xee>
    129a:	20 68       	ori	r18, 0x80	; 128
    129c:	02 c0       	rjmp	.+4      	; 0x12a2 <vfprintf+0xf2>
    129e:	88 36       	cpi	r24, 0x68	; 104
    12a0:	41 f4       	brne	.+16     	; 0x12b2 <vfprintf+0x102>
    12a2:	f6 01       	movw	r30, r12
    12a4:	93 fd       	sbrc	r25, 3
    12a6:	85 91       	lpm	r24, Z+
    12a8:	93 ff       	sbrs	r25, 3
    12aa:	81 91       	ld	r24, Z+
    12ac:	6f 01       	movw	r12, r30
    12ae:	81 11       	cpse	r24, r1
    12b0:	c1 cf       	rjmp	.-126    	; 0x1234 <vfprintf+0x84>
    12b2:	98 2f       	mov	r25, r24
    12b4:	9f 7d       	andi	r25, 0xDF	; 223
    12b6:	95 54       	subi	r25, 0x45	; 69
    12b8:	93 30       	cpi	r25, 0x03	; 3
    12ba:	28 f4       	brcc	.+10     	; 0x12c6 <vfprintf+0x116>
    12bc:	0c 5f       	subi	r16, 0xFC	; 252
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	ff e3       	ldi	r31, 0x3F	; 63
    12c2:	f9 83       	std	Y+1, r31	; 0x01
    12c4:	0d c0       	rjmp	.+26     	; 0x12e0 <vfprintf+0x130>
    12c6:	83 36       	cpi	r24, 0x63	; 99
    12c8:	31 f0       	breq	.+12     	; 0x12d6 <vfprintf+0x126>
    12ca:	83 37       	cpi	r24, 0x73	; 115
    12cc:	71 f0       	breq	.+28     	; 0x12ea <vfprintf+0x13a>
    12ce:	83 35       	cpi	r24, 0x53	; 83
    12d0:	09 f0       	breq	.+2      	; 0x12d4 <vfprintf+0x124>
    12d2:	5b c0       	rjmp	.+182    	; 0x138a <vfprintf+0x1da>
    12d4:	22 c0       	rjmp	.+68     	; 0x131a <vfprintf+0x16a>
    12d6:	f8 01       	movw	r30, r16
    12d8:	80 81       	ld	r24, Z
    12da:	89 83       	std	Y+1, r24	; 0x01
    12dc:	0e 5f       	subi	r16, 0xFE	; 254
    12de:	1f 4f       	sbci	r17, 0xFF	; 255
    12e0:	44 24       	eor	r4, r4
    12e2:	43 94       	inc	r4
    12e4:	51 2c       	mov	r5, r1
    12e6:	54 01       	movw	r10, r8
    12e8:	15 c0       	rjmp	.+42     	; 0x1314 <vfprintf+0x164>
    12ea:	38 01       	movw	r6, r16
    12ec:	f2 e0       	ldi	r31, 0x02	; 2
    12ee:	6f 0e       	add	r6, r31
    12f0:	71 1c       	adc	r7, r1
    12f2:	f8 01       	movw	r30, r16
    12f4:	a0 80       	ld	r10, Z
    12f6:	b1 80       	ldd	r11, Z+1	; 0x01
    12f8:	26 ff       	sbrs	r18, 6
    12fa:	03 c0       	rjmp	.+6      	; 0x1302 <vfprintf+0x152>
    12fc:	65 2d       	mov	r22, r5
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	02 c0       	rjmp	.+4      	; 0x1306 <vfprintf+0x156>
    1302:	6f ef       	ldi	r22, 0xFF	; 255
    1304:	7f ef       	ldi	r23, 0xFF	; 255
    1306:	c5 01       	movw	r24, r10
    1308:	2c 87       	std	Y+12, r18	; 0x0c
    130a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <strnlen>
    130e:	2c 01       	movw	r4, r24
    1310:	83 01       	movw	r16, r6
    1312:	2c 85       	ldd	r18, Y+12	; 0x0c
    1314:	2f 77       	andi	r18, 0x7F	; 127
    1316:	22 2e       	mov	r2, r18
    1318:	17 c0       	rjmp	.+46     	; 0x1348 <vfprintf+0x198>
    131a:	38 01       	movw	r6, r16
    131c:	f2 e0       	ldi	r31, 0x02	; 2
    131e:	6f 0e       	add	r6, r31
    1320:	71 1c       	adc	r7, r1
    1322:	f8 01       	movw	r30, r16
    1324:	a0 80       	ld	r10, Z
    1326:	b1 80       	ldd	r11, Z+1	; 0x01
    1328:	26 ff       	sbrs	r18, 6
    132a:	03 c0       	rjmp	.+6      	; 0x1332 <vfprintf+0x182>
    132c:	65 2d       	mov	r22, r5
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	02 c0       	rjmp	.+4      	; 0x1336 <vfprintf+0x186>
    1332:	6f ef       	ldi	r22, 0xFF	; 255
    1334:	7f ef       	ldi	r23, 0xFF	; 255
    1336:	c5 01       	movw	r24, r10
    1338:	2c 87       	std	Y+12, r18	; 0x0c
    133a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <strnlen_P>
    133e:	2c 01       	movw	r4, r24
    1340:	2c 85       	ldd	r18, Y+12	; 0x0c
    1342:	20 68       	ori	r18, 0x80	; 128
    1344:	22 2e       	mov	r2, r18
    1346:	83 01       	movw	r16, r6
    1348:	23 fc       	sbrc	r2, 3
    134a:	1b c0       	rjmp	.+54     	; 0x1382 <vfprintf+0x1d2>
    134c:	83 2d       	mov	r24, r3
    134e:	90 e0       	ldi	r25, 0x00	; 0
    1350:	48 16       	cp	r4, r24
    1352:	59 06       	cpc	r5, r25
    1354:	b0 f4       	brcc	.+44     	; 0x1382 <vfprintf+0x1d2>
    1356:	b7 01       	movw	r22, r14
    1358:	80 e2       	ldi	r24, 0x20	; 32
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    1360:	3a 94       	dec	r3
    1362:	f4 cf       	rjmp	.-24     	; 0x134c <vfprintf+0x19c>
    1364:	f5 01       	movw	r30, r10
    1366:	27 fc       	sbrc	r2, 7
    1368:	85 91       	lpm	r24, Z+
    136a:	27 fe       	sbrs	r2, 7
    136c:	81 91       	ld	r24, Z+
    136e:	5f 01       	movw	r10, r30
    1370:	b7 01       	movw	r22, r14
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    1378:	31 10       	cpse	r3, r1
    137a:	3a 94       	dec	r3
    137c:	f1 e0       	ldi	r31, 0x01	; 1
    137e:	4f 1a       	sub	r4, r31
    1380:	51 08       	sbc	r5, r1
    1382:	41 14       	cp	r4, r1
    1384:	51 04       	cpc	r5, r1
    1386:	71 f7       	brne	.-36     	; 0x1364 <vfprintf+0x1b4>
    1388:	e5 c0       	rjmp	.+458    	; 0x1554 <vfprintf+0x3a4>
    138a:	84 36       	cpi	r24, 0x64	; 100
    138c:	11 f0       	breq	.+4      	; 0x1392 <vfprintf+0x1e2>
    138e:	89 36       	cpi	r24, 0x69	; 105
    1390:	39 f5       	brne	.+78     	; 0x13e0 <vfprintf+0x230>
    1392:	f8 01       	movw	r30, r16
    1394:	27 ff       	sbrs	r18, 7
    1396:	07 c0       	rjmp	.+14     	; 0x13a6 <vfprintf+0x1f6>
    1398:	60 81       	ld	r22, Z
    139a:	71 81       	ldd	r23, Z+1	; 0x01
    139c:	82 81       	ldd	r24, Z+2	; 0x02
    139e:	93 81       	ldd	r25, Z+3	; 0x03
    13a0:	0c 5f       	subi	r16, 0xFC	; 252
    13a2:	1f 4f       	sbci	r17, 0xFF	; 255
    13a4:	08 c0       	rjmp	.+16     	; 0x13b6 <vfprintf+0x206>
    13a6:	60 81       	ld	r22, Z
    13a8:	71 81       	ldd	r23, Z+1	; 0x01
    13aa:	88 27       	eor	r24, r24
    13ac:	77 fd       	sbrc	r23, 7
    13ae:	80 95       	com	r24
    13b0:	98 2f       	mov	r25, r24
    13b2:	0e 5f       	subi	r16, 0xFE	; 254
    13b4:	1f 4f       	sbci	r17, 0xFF	; 255
    13b6:	2f 76       	andi	r18, 0x6F	; 111
    13b8:	b2 2e       	mov	r11, r18
    13ba:	97 ff       	sbrs	r25, 7
    13bc:	09 c0       	rjmp	.+18     	; 0x13d0 <vfprintf+0x220>
    13be:	90 95       	com	r25
    13c0:	80 95       	com	r24
    13c2:	70 95       	com	r23
    13c4:	61 95       	neg	r22
    13c6:	7f 4f       	sbci	r23, 0xFF	; 255
    13c8:	8f 4f       	sbci	r24, 0xFF	; 255
    13ca:	9f 4f       	sbci	r25, 0xFF	; 255
    13cc:	20 68       	ori	r18, 0x80	; 128
    13ce:	b2 2e       	mov	r11, r18
    13d0:	2a e0       	ldi	r18, 0x0A	; 10
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	a4 01       	movw	r20, r8
    13d6:	0e 94 31 0b 	call	0x1662	; 0x1662 <__ultoa_invert>
    13da:	a8 2e       	mov	r10, r24
    13dc:	a8 18       	sub	r10, r8
    13de:	44 c0       	rjmp	.+136    	; 0x1468 <vfprintf+0x2b8>
    13e0:	85 37       	cpi	r24, 0x75	; 117
    13e2:	29 f4       	brne	.+10     	; 0x13ee <vfprintf+0x23e>
    13e4:	2f 7e       	andi	r18, 0xEF	; 239
    13e6:	b2 2e       	mov	r11, r18
    13e8:	2a e0       	ldi	r18, 0x0A	; 10
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	25 c0       	rjmp	.+74     	; 0x1438 <vfprintf+0x288>
    13ee:	f2 2f       	mov	r31, r18
    13f0:	f9 7f       	andi	r31, 0xF9	; 249
    13f2:	bf 2e       	mov	r11, r31
    13f4:	8f 36       	cpi	r24, 0x6F	; 111
    13f6:	c1 f0       	breq	.+48     	; 0x1428 <vfprintf+0x278>
    13f8:	18 f4       	brcc	.+6      	; 0x1400 <vfprintf+0x250>
    13fa:	88 35       	cpi	r24, 0x58	; 88
    13fc:	79 f0       	breq	.+30     	; 0x141c <vfprintf+0x26c>
    13fe:	b4 c0       	rjmp	.+360    	; 0x1568 <vfprintf+0x3b8>
    1400:	80 37       	cpi	r24, 0x70	; 112
    1402:	19 f0       	breq	.+6      	; 0x140a <vfprintf+0x25a>
    1404:	88 37       	cpi	r24, 0x78	; 120
    1406:	21 f0       	breq	.+8      	; 0x1410 <vfprintf+0x260>
    1408:	af c0       	rjmp	.+350    	; 0x1568 <vfprintf+0x3b8>
    140a:	2f 2f       	mov	r18, r31
    140c:	20 61       	ori	r18, 0x10	; 16
    140e:	b2 2e       	mov	r11, r18
    1410:	b4 fe       	sbrs	r11, 4
    1412:	0d c0       	rjmp	.+26     	; 0x142e <vfprintf+0x27e>
    1414:	8b 2d       	mov	r24, r11
    1416:	84 60       	ori	r24, 0x04	; 4
    1418:	b8 2e       	mov	r11, r24
    141a:	09 c0       	rjmp	.+18     	; 0x142e <vfprintf+0x27e>
    141c:	24 ff       	sbrs	r18, 4
    141e:	0a c0       	rjmp	.+20     	; 0x1434 <vfprintf+0x284>
    1420:	9f 2f       	mov	r25, r31
    1422:	96 60       	ori	r25, 0x06	; 6
    1424:	b9 2e       	mov	r11, r25
    1426:	06 c0       	rjmp	.+12     	; 0x1434 <vfprintf+0x284>
    1428:	28 e0       	ldi	r18, 0x08	; 8
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	05 c0       	rjmp	.+10     	; 0x1438 <vfprintf+0x288>
    142e:	20 e1       	ldi	r18, 0x10	; 16
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	02 c0       	rjmp	.+4      	; 0x1438 <vfprintf+0x288>
    1434:	20 e1       	ldi	r18, 0x10	; 16
    1436:	32 e0       	ldi	r19, 0x02	; 2
    1438:	f8 01       	movw	r30, r16
    143a:	b7 fe       	sbrs	r11, 7
    143c:	07 c0       	rjmp	.+14     	; 0x144c <vfprintf+0x29c>
    143e:	60 81       	ld	r22, Z
    1440:	71 81       	ldd	r23, Z+1	; 0x01
    1442:	82 81       	ldd	r24, Z+2	; 0x02
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	0c 5f       	subi	r16, 0xFC	; 252
    1448:	1f 4f       	sbci	r17, 0xFF	; 255
    144a:	06 c0       	rjmp	.+12     	; 0x1458 <vfprintf+0x2a8>
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	0e 5f       	subi	r16, 0xFE	; 254
    1456:	1f 4f       	sbci	r17, 0xFF	; 255
    1458:	a4 01       	movw	r20, r8
    145a:	0e 94 31 0b 	call	0x1662	; 0x1662 <__ultoa_invert>
    145e:	a8 2e       	mov	r10, r24
    1460:	a8 18       	sub	r10, r8
    1462:	fb 2d       	mov	r31, r11
    1464:	ff 77       	andi	r31, 0x7F	; 127
    1466:	bf 2e       	mov	r11, r31
    1468:	b6 fe       	sbrs	r11, 6
    146a:	0b c0       	rjmp	.+22     	; 0x1482 <vfprintf+0x2d2>
    146c:	2b 2d       	mov	r18, r11
    146e:	2e 7f       	andi	r18, 0xFE	; 254
    1470:	a5 14       	cp	r10, r5
    1472:	50 f4       	brcc	.+20     	; 0x1488 <vfprintf+0x2d8>
    1474:	b4 fe       	sbrs	r11, 4
    1476:	0a c0       	rjmp	.+20     	; 0x148c <vfprintf+0x2dc>
    1478:	b2 fc       	sbrc	r11, 2
    147a:	08 c0       	rjmp	.+16     	; 0x148c <vfprintf+0x2dc>
    147c:	2b 2d       	mov	r18, r11
    147e:	2e 7e       	andi	r18, 0xEE	; 238
    1480:	05 c0       	rjmp	.+10     	; 0x148c <vfprintf+0x2dc>
    1482:	7a 2c       	mov	r7, r10
    1484:	2b 2d       	mov	r18, r11
    1486:	03 c0       	rjmp	.+6      	; 0x148e <vfprintf+0x2de>
    1488:	7a 2c       	mov	r7, r10
    148a:	01 c0       	rjmp	.+2      	; 0x148e <vfprintf+0x2de>
    148c:	75 2c       	mov	r7, r5
    148e:	24 ff       	sbrs	r18, 4
    1490:	0d c0       	rjmp	.+26     	; 0x14ac <vfprintf+0x2fc>
    1492:	fe 01       	movw	r30, r28
    1494:	ea 0d       	add	r30, r10
    1496:	f1 1d       	adc	r31, r1
    1498:	80 81       	ld	r24, Z
    149a:	80 33       	cpi	r24, 0x30	; 48
    149c:	11 f4       	brne	.+4      	; 0x14a2 <vfprintf+0x2f2>
    149e:	29 7e       	andi	r18, 0xE9	; 233
    14a0:	09 c0       	rjmp	.+18     	; 0x14b4 <vfprintf+0x304>
    14a2:	22 ff       	sbrs	r18, 2
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <vfprintf+0x302>
    14a6:	73 94       	inc	r7
    14a8:	73 94       	inc	r7
    14aa:	04 c0       	rjmp	.+8      	; 0x14b4 <vfprintf+0x304>
    14ac:	82 2f       	mov	r24, r18
    14ae:	86 78       	andi	r24, 0x86	; 134
    14b0:	09 f0       	breq	.+2      	; 0x14b4 <vfprintf+0x304>
    14b2:	73 94       	inc	r7
    14b4:	23 fd       	sbrc	r18, 3
    14b6:	13 c0       	rjmp	.+38     	; 0x14de <vfprintf+0x32e>
    14b8:	20 ff       	sbrs	r18, 0
    14ba:	06 c0       	rjmp	.+12     	; 0x14c8 <vfprintf+0x318>
    14bc:	5a 2c       	mov	r5, r10
    14be:	73 14       	cp	r7, r3
    14c0:	18 f4       	brcc	.+6      	; 0x14c8 <vfprintf+0x318>
    14c2:	53 0c       	add	r5, r3
    14c4:	57 18       	sub	r5, r7
    14c6:	73 2c       	mov	r7, r3
    14c8:	73 14       	cp	r7, r3
    14ca:	68 f4       	brcc	.+26     	; 0x14e6 <vfprintf+0x336>
    14cc:	b7 01       	movw	r22, r14
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	2c 87       	std	Y+12, r18	; 0x0c
    14d4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    14d8:	73 94       	inc	r7
    14da:	2c 85       	ldd	r18, Y+12	; 0x0c
    14dc:	f5 cf       	rjmp	.-22     	; 0x14c8 <vfprintf+0x318>
    14de:	73 14       	cp	r7, r3
    14e0:	10 f4       	brcc	.+4      	; 0x14e6 <vfprintf+0x336>
    14e2:	37 18       	sub	r3, r7
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <vfprintf+0x338>
    14e6:	31 2c       	mov	r3, r1
    14e8:	24 ff       	sbrs	r18, 4
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <vfprintf+0x360>
    14ec:	b7 01       	movw	r22, r14
    14ee:	80 e3       	ldi	r24, 0x30	; 48
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	2c 87       	std	Y+12, r18	; 0x0c
    14f4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    14f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    14fa:	22 ff       	sbrs	r18, 2
    14fc:	17 c0       	rjmp	.+46     	; 0x152c <vfprintf+0x37c>
    14fe:	21 ff       	sbrs	r18, 1
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x358>
    1502:	88 e5       	ldi	r24, 0x58	; 88
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 c0       	rjmp	.+4      	; 0x150c <vfprintf+0x35c>
    1508:	88 e7       	ldi	r24, 0x78	; 120
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	b7 01       	movw	r22, r14
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <vfprintf+0x378>
    1510:	82 2f       	mov	r24, r18
    1512:	86 78       	andi	r24, 0x86	; 134
    1514:	59 f0       	breq	.+22     	; 0x152c <vfprintf+0x37c>
    1516:	21 fd       	sbrc	r18, 1
    1518:	02 c0       	rjmp	.+4      	; 0x151e <vfprintf+0x36e>
    151a:	80 e2       	ldi	r24, 0x20	; 32
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <vfprintf+0x370>
    151e:	8b e2       	ldi	r24, 0x2B	; 43
    1520:	27 fd       	sbrc	r18, 7
    1522:	8d e2       	ldi	r24, 0x2D	; 45
    1524:	b7 01       	movw	r22, r14
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    152c:	a5 14       	cp	r10, r5
    152e:	38 f4       	brcc	.+14     	; 0x153e <vfprintf+0x38e>
    1530:	b7 01       	movw	r22, r14
    1532:	80 e3       	ldi	r24, 0x30	; 48
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    153a:	5a 94       	dec	r5
    153c:	f7 cf       	rjmp	.-18     	; 0x152c <vfprintf+0x37c>
    153e:	aa 94       	dec	r10
    1540:	f4 01       	movw	r30, r8
    1542:	ea 0d       	add	r30, r10
    1544:	f1 1d       	adc	r31, r1
    1546:	80 81       	ld	r24, Z
    1548:	b7 01       	movw	r22, r14
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    1550:	a1 10       	cpse	r10, r1
    1552:	f5 cf       	rjmp	.-22     	; 0x153e <vfprintf+0x38e>
    1554:	33 20       	and	r3, r3
    1556:	09 f4       	brne	.+2      	; 0x155a <vfprintf+0x3aa>
    1558:	51 ce       	rjmp	.-862    	; 0x11fc <vfprintf+0x4c>
    155a:	b7 01       	movw	r22, r14
    155c:	80 e2       	ldi	r24, 0x20	; 32
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <fputc>
    1564:	3a 94       	dec	r3
    1566:	f6 cf       	rjmp	.-20     	; 0x1554 <vfprintf+0x3a4>
    1568:	f7 01       	movw	r30, r14
    156a:	86 81       	ldd	r24, Z+6	; 0x06
    156c:	97 81       	ldd	r25, Z+7	; 0x07
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <vfprintf+0x3c4>
    1570:	8f ef       	ldi	r24, 0xFF	; 255
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	2c 96       	adiw	r28, 0x0c	; 12
    1576:	0f b6       	in	r0, 0x3f	; 63
    1578:	f8 94       	cli
    157a:	de bf       	out	0x3e, r29	; 62
    157c:	0f be       	out	0x3f, r0	; 63
    157e:	cd bf       	out	0x3d, r28	; 61
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	1f 91       	pop	r17
    1586:	0f 91       	pop	r16
    1588:	ff 90       	pop	r15
    158a:	ef 90       	pop	r14
    158c:	df 90       	pop	r13
    158e:	cf 90       	pop	r12
    1590:	bf 90       	pop	r11
    1592:	af 90       	pop	r10
    1594:	9f 90       	pop	r9
    1596:	8f 90       	pop	r8
    1598:	7f 90       	pop	r7
    159a:	6f 90       	pop	r6
    159c:	5f 90       	pop	r5
    159e:	4f 90       	pop	r4
    15a0:	3f 90       	pop	r3
    15a2:	2f 90       	pop	r2
    15a4:	08 95       	ret

000015a6 <__eerd_byte_m1284p>:
    15a6:	f9 99       	sbic	0x1f, 1	; 31
    15a8:	fe cf       	rjmp	.-4      	; 0x15a6 <__eerd_byte_m1284p>
    15aa:	92 bd       	out	0x22, r25	; 34
    15ac:	81 bd       	out	0x21, r24	; 33
    15ae:	f8 9a       	sbi	0x1f, 0	; 31
    15b0:	99 27       	eor	r25, r25
    15b2:	80 b5       	in	r24, 0x20	; 32
    15b4:	08 95       	ret

000015b6 <__eewr_byte_m1284p>:
    15b6:	26 2f       	mov	r18, r22

000015b8 <__eewr_r18_m1284p>:
    15b8:	f9 99       	sbic	0x1f, 1	; 31
    15ba:	fe cf       	rjmp	.-4      	; 0x15b8 <__eewr_r18_m1284p>
    15bc:	1f ba       	out	0x1f, r1	; 31
    15be:	92 bd       	out	0x22, r25	; 34
    15c0:	81 bd       	out	0x21, r24	; 33
    15c2:	20 bd       	out	0x20, r18	; 32
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	fa 9a       	sbi	0x1f, 2	; 31
    15ca:	f9 9a       	sbi	0x1f, 1	; 31
    15cc:	0f be       	out	0x3f, r0	; 63
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	08 95       	ret

000015d2 <strnlen_P>:
    15d2:	fc 01       	movw	r30, r24
    15d4:	05 90       	lpm	r0, Z+
    15d6:	61 50       	subi	r22, 0x01	; 1
    15d8:	70 40       	sbci	r23, 0x00	; 0
    15da:	01 10       	cpse	r0, r1
    15dc:	d8 f7       	brcc	.-10     	; 0x15d4 <strnlen_P+0x2>
    15de:	80 95       	com	r24
    15e0:	90 95       	com	r25
    15e2:	8e 0f       	add	r24, r30
    15e4:	9f 1f       	adc	r25, r31
    15e6:	08 95       	ret

000015e8 <strnlen>:
    15e8:	fc 01       	movw	r30, r24
    15ea:	61 50       	subi	r22, 0x01	; 1
    15ec:	70 40       	sbci	r23, 0x00	; 0
    15ee:	01 90       	ld	r0, Z+
    15f0:	01 10       	cpse	r0, r1
    15f2:	d8 f7       	brcc	.-10     	; 0x15ea <strnlen+0x2>
    15f4:	80 95       	com	r24
    15f6:	90 95       	com	r25
    15f8:	8e 0f       	add	r24, r30
    15fa:	9f 1f       	adc	r25, r31
    15fc:	08 95       	ret

000015fe <fputc>:
    15fe:	0f 93       	push	r16
    1600:	1f 93       	push	r17
    1602:	cf 93       	push	r28
    1604:	df 93       	push	r29
    1606:	18 2f       	mov	r17, r24
    1608:	09 2f       	mov	r16, r25
    160a:	eb 01       	movw	r28, r22
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	81 fd       	sbrc	r24, 1
    1610:	03 c0       	rjmp	.+6      	; 0x1618 <fputc+0x1a>
    1612:	8f ef       	ldi	r24, 0xFF	; 255
    1614:	9f ef       	ldi	r25, 0xFF	; 255
    1616:	20 c0       	rjmp	.+64     	; 0x1658 <fputc+0x5a>
    1618:	82 ff       	sbrs	r24, 2
    161a:	10 c0       	rjmp	.+32     	; 0x163c <fputc+0x3e>
    161c:	4e 81       	ldd	r20, Y+6	; 0x06
    161e:	5f 81       	ldd	r21, Y+7	; 0x07
    1620:	2c 81       	ldd	r18, Y+4	; 0x04
    1622:	3d 81       	ldd	r19, Y+5	; 0x05
    1624:	42 17       	cp	r20, r18
    1626:	53 07       	cpc	r21, r19
    1628:	7c f4       	brge	.+30     	; 0x1648 <fputc+0x4a>
    162a:	e8 81       	ld	r30, Y
    162c:	f9 81       	ldd	r31, Y+1	; 0x01
    162e:	9f 01       	movw	r18, r30
    1630:	2f 5f       	subi	r18, 0xFF	; 255
    1632:	3f 4f       	sbci	r19, 0xFF	; 255
    1634:	39 83       	std	Y+1, r19	; 0x01
    1636:	28 83       	st	Y, r18
    1638:	10 83       	st	Z, r17
    163a:	06 c0       	rjmp	.+12     	; 0x1648 <fputc+0x4a>
    163c:	e8 85       	ldd	r30, Y+8	; 0x08
    163e:	f9 85       	ldd	r31, Y+9	; 0x09
    1640:	81 2f       	mov	r24, r17
    1642:	09 95       	icall
    1644:	89 2b       	or	r24, r25
    1646:	29 f7       	brne	.-54     	; 0x1612 <fputc+0x14>
    1648:	2e 81       	ldd	r18, Y+6	; 0x06
    164a:	3f 81       	ldd	r19, Y+7	; 0x07
    164c:	2f 5f       	subi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	3f 83       	std	Y+7, r19	; 0x07
    1652:	2e 83       	std	Y+6, r18	; 0x06
    1654:	81 2f       	mov	r24, r17
    1656:	90 2f       	mov	r25, r16
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <__ultoa_invert>:
    1662:	fa 01       	movw	r30, r20
    1664:	aa 27       	eor	r26, r26
    1666:	28 30       	cpi	r18, 0x08	; 8
    1668:	51 f1       	breq	.+84     	; 0x16be <__ultoa_invert+0x5c>
    166a:	20 31       	cpi	r18, 0x10	; 16
    166c:	81 f1       	breq	.+96     	; 0x16ce <__ultoa_invert+0x6c>
    166e:	e8 94       	clt
    1670:	6f 93       	push	r22
    1672:	6e 7f       	andi	r22, 0xFE	; 254
    1674:	6e 5f       	subi	r22, 0xFE	; 254
    1676:	7f 4f       	sbci	r23, 0xFF	; 255
    1678:	8f 4f       	sbci	r24, 0xFF	; 255
    167a:	9f 4f       	sbci	r25, 0xFF	; 255
    167c:	af 4f       	sbci	r26, 0xFF	; 255
    167e:	b1 e0       	ldi	r27, 0x01	; 1
    1680:	3e d0       	rcall	.+124    	; 0x16fe <__ultoa_invert+0x9c>
    1682:	b4 e0       	ldi	r27, 0x04	; 4
    1684:	3c d0       	rcall	.+120    	; 0x16fe <__ultoa_invert+0x9c>
    1686:	67 0f       	add	r22, r23
    1688:	78 1f       	adc	r23, r24
    168a:	89 1f       	adc	r24, r25
    168c:	9a 1f       	adc	r25, r26
    168e:	a1 1d       	adc	r26, r1
    1690:	68 0f       	add	r22, r24
    1692:	79 1f       	adc	r23, r25
    1694:	8a 1f       	adc	r24, r26
    1696:	91 1d       	adc	r25, r1
    1698:	a1 1d       	adc	r26, r1
    169a:	6a 0f       	add	r22, r26
    169c:	71 1d       	adc	r23, r1
    169e:	81 1d       	adc	r24, r1
    16a0:	91 1d       	adc	r25, r1
    16a2:	a1 1d       	adc	r26, r1
    16a4:	20 d0       	rcall	.+64     	; 0x16e6 <__ultoa_invert+0x84>
    16a6:	09 f4       	brne	.+2      	; 0x16aa <__ultoa_invert+0x48>
    16a8:	68 94       	set
    16aa:	3f 91       	pop	r19
    16ac:	2a e0       	ldi	r18, 0x0A	; 10
    16ae:	26 9f       	mul	r18, r22
    16b0:	11 24       	eor	r1, r1
    16b2:	30 19       	sub	r19, r0
    16b4:	30 5d       	subi	r19, 0xD0	; 208
    16b6:	31 93       	st	Z+, r19
    16b8:	de f6       	brtc	.-74     	; 0x1670 <__ultoa_invert+0xe>
    16ba:	cf 01       	movw	r24, r30
    16bc:	08 95       	ret
    16be:	46 2f       	mov	r20, r22
    16c0:	47 70       	andi	r20, 0x07	; 7
    16c2:	40 5d       	subi	r20, 0xD0	; 208
    16c4:	41 93       	st	Z+, r20
    16c6:	b3 e0       	ldi	r27, 0x03	; 3
    16c8:	0f d0       	rcall	.+30     	; 0x16e8 <__ultoa_invert+0x86>
    16ca:	c9 f7       	brne	.-14     	; 0x16be <__ultoa_invert+0x5c>
    16cc:	f6 cf       	rjmp	.-20     	; 0x16ba <__ultoa_invert+0x58>
    16ce:	46 2f       	mov	r20, r22
    16d0:	4f 70       	andi	r20, 0x0F	; 15
    16d2:	40 5d       	subi	r20, 0xD0	; 208
    16d4:	4a 33       	cpi	r20, 0x3A	; 58
    16d6:	18 f0       	brcs	.+6      	; 0x16de <__ultoa_invert+0x7c>
    16d8:	49 5d       	subi	r20, 0xD9	; 217
    16da:	31 fd       	sbrc	r19, 1
    16dc:	40 52       	subi	r20, 0x20	; 32
    16de:	41 93       	st	Z+, r20
    16e0:	02 d0       	rcall	.+4      	; 0x16e6 <__ultoa_invert+0x84>
    16e2:	a9 f7       	brne	.-22     	; 0x16ce <__ultoa_invert+0x6c>
    16e4:	ea cf       	rjmp	.-44     	; 0x16ba <__ultoa_invert+0x58>
    16e6:	b4 e0       	ldi	r27, 0x04	; 4
    16e8:	a6 95       	lsr	r26
    16ea:	97 95       	ror	r25
    16ec:	87 95       	ror	r24
    16ee:	77 95       	ror	r23
    16f0:	67 95       	ror	r22
    16f2:	ba 95       	dec	r27
    16f4:	c9 f7       	brne	.-14     	; 0x16e8 <__ultoa_invert+0x86>
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	61 05       	cpc	r22, r1
    16fa:	71 05       	cpc	r23, r1
    16fc:	08 95       	ret
    16fe:	9b 01       	movw	r18, r22
    1700:	ac 01       	movw	r20, r24
    1702:	0a 2e       	mov	r0, r26
    1704:	06 94       	lsr	r0
    1706:	57 95       	ror	r21
    1708:	47 95       	ror	r20
    170a:	37 95       	ror	r19
    170c:	27 95       	ror	r18
    170e:	ba 95       	dec	r27
    1710:	c9 f7       	brne	.-14     	; 0x1704 <__ultoa_invert+0xa2>
    1712:	62 0f       	add	r22, r18
    1714:	73 1f       	adc	r23, r19
    1716:	84 1f       	adc	r24, r20
    1718:	95 1f       	adc	r25, r21
    171a:	a0 1d       	adc	r26, r0
    171c:	08 95       	ret

0000171e <_exit>:
    171e:	f8 94       	cli

00001720 <__stop_program>:
    1720:	ff cf       	rjmp	.-2      	; 0x1720 <__stop_program>
